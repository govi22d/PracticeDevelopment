//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PDA.DbContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MACS_ST2Entities : DbContext
    {
        public MACS_ST2Entities()
            : base("name=MACS_ST2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<ActivityLocation> ActivityLocations { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressLine> AddressLines { get; set; }
        public virtual DbSet<AdjustmentType> AdjustmentTypes { get; set; }
        public virtual DbSet<AdvanceShipmentNotice> AdvanceShipmentNotices { get; set; }
        public virtual DbSet<AllowedPackage> AllowedPackages { get; set; }
        public virtual DbSet<AlternateLocation> AlternateLocations { get; set; }
        public virtual DbSet<AlternativeShipToAddress> AlternativeShipToAddresses { get; set; }
        public virtual DbSet<ASNMainPackage> ASNMainPackages { get; set; }
        public virtual DbSet<ASNMOSOrARQ> ASNMOSOrARQs { get; set; }
        public virtual DbSet<ASNPart> ASNParts { get; set; }
        public virtual DbSet<ASNSubPackage> ASNSubPackages { get; set; }
        public virtual DbSet<AuthorizationRule> AuthorizationRules { get; set; }
        public virtual DbSet<AutoreplyOnPart> AutoreplyOnParts { get; set; }
        public virtual DbSet<AutoreplyOnPartAndDeliveryPoint> AutoreplyOnPartAndDeliveryPoints { get; set; }
        public virtual DbSet<AutoScanner> AutoScanners { get; set; }
        public virtual DbSet<AutoSystem> AutoSystems { get; set; }
        public virtual DbSet<AvailableLocation> AvailableLocations { get; set; }
        public virtual DbSet<BlockedDeliveryUnit> BlockedDeliveryUnits { get; set; }
        public virtual DbSet<BookedTransportAssignment> BookedTransportAssignments { get; set; }
        public virtual DbSet<BufferLevel> BufferLevels { get; set; }
        public virtual DbSet<Carrier> Carriers { get; set; }
        public virtual DbSet<CassetteLocationGroupBlock> CassetteLocationGroupBlocks { get; set; }
        public virtual DbSet<CKDAdvanceShipmentNotice> CKDAdvanceShipmentNotices { get; set; }
        public virtual DbSet<CKDASNContainer> CKDASNContainers { get; set; }
        public virtual DbSet<CKDASNMainPackage> CKDASNMainPackages { get; set; }
        public virtual DbSet<CKDASNPart> CKDASNParts { get; set; }
        public virtual DbSet<CKDASNSubPackage> CKDASNSubPackages { get; set; }
        public virtual DbSet<ComponentActivity> ComponentActivities { get; set; }
        public virtual DbSet<ComponentCharacteristic> ComponentCharacteristics { get; set; }
        public virtual DbSet<ComponentGroupException> ComponentGroupExceptions { get; set; }
        public virtual DbSet<ComponentOrder> ComponentOrders { get; set; }
        public virtual DbSet<ComponentOrderHandling> ComponentOrderHandlings { get; set; }
        public virtual DbSet<ComponentProductionFlow> ComponentProductionFlows { get; set; }
        public virtual DbSet<ComponentTransport> ComponentTransports { get; set; }
        public virtual DbSet<ConfirmationMode> ConfirmationModes { get; set; }
        public virtual DbSet<ConnectedExecutionOrderType> ConnectedExecutionOrderTypes { get; set; }
        public virtual DbSet<ConsignmentNote> ConsignmentNotes { get; set; }
        public virtual DbSet<ConsignmentNoteStatu> ConsignmentNoteStatus { get; set; }
        public virtual DbSet<CraneSearchSequence> CraneSearchSequences { get; set; }
        public virtual DbSet<CustomerCode> CustomerCodes { get; set; }
        public virtual DbSet<CustomerGroup> CustomerGroups { get; set; }
        public virtual DbSet<CustomerOrderFlag> CustomerOrderFlags { get; set; }
        public virtual DbSet<CustomerOrderGoodsMark> CustomerOrderGoodsMarks { get; set; }
        public virtual DbSet<CustomerOrderHead> CustomerOrderHeads { get; set; }
        public virtual DbSet<CustomerOrderSequence> CustomerOrderSequences { get; set; }
        public virtual DbSet<CustomerOrderStatu> CustomerOrderStatus { get; set; }
        public virtual DbSet<CustomerOrderType> CustomerOrderTypes { get; set; }
        public virtual DbSet<CustomerPartNumberType> CustomerPartNumberTypes { get; set; }
        public virtual DbSet<CustomerReceiver> CustomerReceivers { get; set; }
        public virtual DbSet<CustomerReceiverAddress> CustomerReceiverAddresses { get; set; }
        public virtual DbSet<CustomerReceiverFlow> CustomerReceiverFlows { get; set; }
        public virtual DbSet<CustomerReceiverPart> CustomerReceiverParts { get; set; }
        public virtual DbSet<CustomerReception> CustomerReceptions { get; set; }
        public virtual DbSet<DeliveryLocation> DeliveryLocations { get; set; }
        public virtual DbSet<DeliveryLocationPerZone> DeliveryLocationPerZones { get; set; }
        public virtual DbSet<DeliveryLocationRejectCode> DeliveryLocationRejectCodes { get; set; }
        public virtual DbSet<DeliveryNote> DeliveryNotes { get; set; }
        public virtual DbSet<DeliveryNoteLine> DeliveryNoteLines { get; set; }
        public virtual DbSet<DeliveryNotePart> DeliveryNoteParts { get; set; }
        public virtual DbSet<DeliveryUnit> DeliveryUnits { get; set; }
        public virtual DbSet<DeliveryUnitHasPassedStation> DeliveryUnitHasPassedStations { get; set; }
        public virtual DbSet<DeliveryUnitMainOrder> DeliveryUnitMainOrders { get; set; }
        public virtual DbSet<DeliveryUnitMasterItem> DeliveryUnitMasterItems { get; set; }
        public virtual DbSet<DeliveryUnitPart> DeliveryUnitParts { get; set; }
        public virtual DbSet<DeliveryUnitPartWorkcell> DeliveryUnitPartWorkcells { get; set; }
        public virtual DbSet<DeliveryUnitStatusFilter> DeliveryUnitStatusFilters { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentLocation> DepartmentLocations { get; set; }
        public virtual DbSet<DepartmentOrderNeedTime> DepartmentOrderNeedTimes { get; set; }
        public virtual DbSet<DepartmentPrinter> DepartmentPrinters { get; set; }
        public virtual DbSet<DepartmentSystemParameter> DepartmentSystemParameters { get; set; }
        public virtual DbSet<DispatchAddress> DispatchAddresses { get; set; }
        public virtual DbSet<DispatchInvoiceInfo> DispatchInvoiceInfoes { get; set; }
        public virtual DbSet<DispatchInvoiceInfoBasic> DispatchInvoiceInfoBasics { get; set; }
        public virtual DbSet<DocumentDutyFieldNo> DocumentDutyFieldNoes { get; set; }
        public virtual DbSet<EdiStatu> EdiStatus { get; set; }
        public virtual DbSet<EmballageFieldNumber> EmballageFieldNumbers { get; set; }
        public virtual DbSet<EmballageType> EmballageTypes { get; set; }
        public virtual DbSet<EmballageTypeOccupyNoOfStow> EmballageTypeOccupyNoOfStows { get; set; }
        public virtual DbSet<EventField> EventFields { get; set; }
        public virtual DbSet<EventGroup> EventGroups { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<EventTypeGroup> EventTypeGroups { get; set; }
        public virtual DbSet<ExceptionsMaterialHandlingCode> ExceptionsMaterialHandlingCodes { get; set; }
        public virtual DbSet<ExportASN> ExportASNs { get; set; }
        public virtual DbSet<ExportASNPackage> ExportASNPackages { get; set; }
        public virtual DbSet<ExportASNPackageNumber> ExportASNPackageNumbers { get; set; }
        public virtual DbSet<ExternalCustomer> ExternalCustomers { get; set; }
        public virtual DbSet<ExternalCustomerReceiver> ExternalCustomerReceivers { get; set; }
        public virtual DbSet<ExternalCustomerReceiverPart> ExternalCustomerReceiverParts { get; set; }
        public virtual DbSet<ExternalPart> ExternalParts { get; set; }
        public virtual DbSet<Factory> Factories { get; set; }
        public virtual DbSet<FactorySystemParameter> FactorySystemParameters { get; set; }
        public virtual DbSet<FieldNoDescription> FieldNoDescriptions { get; set; }
        public virtual DbSet<FirstOperationMachining> FirstOperationMachinings { get; set; }
        public virtual DbSet<FlightExpress> FlightExpresses { get; set; }
        public virtual DbSet<FlightExpressDescription> FlightExpressDescriptions { get; set; }
        public virtual DbSet<FromToConnection> FromToConnections { get; set; }
        public virtual DbSet<Function> Functions { get; set; }
        public virtual DbSet<FunctionSystemParameterMapping> FunctionSystemParameterMappings { get; set; }
        public virtual DbSet<Gate> Gates { get; set; }
        public virtual DbSet<GenericSystemParameter> GenericSystemParameters { get; set; }
        public virtual DbSet<GroupingExceptionType> GroupingExceptionTypes { get; set; }
        public virtual DbSet<HardConnectedCBU> HardConnectedCBUs { get; set; }
        public virtual DbSet<HardConnectedCBUFailed> HardConnectedCBUFaileds { get; set; }
        public virtual DbSet<HistoryEvent> HistoryEvents { get; set; }
        public virtual DbSet<HistoryField> HistoryFields { get; set; }
        public virtual DbSet<Individual> Individuals { get; set; }
        public virtual DbSet<InnerPackingWeight> InnerPackingWeights { get; set; }
        public virtual DbSet<InspectionRequest> InspectionRequests { get; set; }
        public virtual DbSet<InternalOrderFlag> InternalOrderFlags { get; set; }
        public virtual DbSet<InventoryWithdrawalOnLocation> InventoryWithdrawalOnLocations { get; set; }
        public virtual DbSet<InventoryWithdrawalType> InventoryWithdrawalTypes { get; set; }
        public virtual DbSet<InventoryWithdrawalTypeDescription> InventoryWithdrawalTypeDescriptions { get; set; }
        public virtual DbSet<KDBatchSize> KDBatchSizes { get; set; }
        public virtual DbSet<KDBatchSizeOrder> KDBatchSizeOrders { get; set; }
        public virtual DbSet<Kit> Kits { get; set; }
        public virtual DbSet<KitColour> KitColours { get; set; }
        public virtual DbSet<KitCompanion> KitCompanions { get; set; }
        public virtual DbSet<KitOrderMessageHistory> KitOrderMessageHistories { get; set; }
        public virtual DbSet<KitPickDeliveryUnit> KitPickDeliveryUnits { get; set; }
        public virtual DbSet<KitPickDeliveryUnitKit> KitPickDeliveryUnitKits { get; set; }
        public virtual DbSet<KitPickDeliveryUnitKitPlanned> KitPickDeliveryUnitKitPlanneds { get; set; }
        public virtual DbSet<KitPickDeliveryUnitPart> KitPickDeliveryUnitParts { get; set; }
        public virtual DbSet<KitPickDeliveryUnitPartPlanned> KitPickDeliveryUnitPartPlanneds { get; set; }
        public virtual DbSet<KitPickDeliveryUnitPlanned> KitPickDeliveryUnitPlanneds { get; set; }
        public virtual DbSet<KitPickGroupStartSequence> KitPickGroupStartSequences { get; set; }
        public virtual DbSet<KitPickLocation> KitPickLocations { get; set; }
        public virtual DbSet<KitPickMasterGroup> KitPickMasterGroups { get; set; }
        public virtual DbSet<KitPreAssemblyPickupLocation> KitPreAssemblyPickupLocations { get; set; }
        public virtual DbSet<KitPreAssemblyPickupLocationKit> KitPreAssemblyPickupLocationKits { get; set; }
        public virtual DbSet<KitPreAssemblyPickupLocationPart> KitPreAssemblyPickupLocationParts { get; set; }
        public virtual DbSet<KitPreparationError> KitPreparationErrors { get; set; }
        public virtual DbSet<KitRebreakError> KitRebreakErrors { get; set; }
        public virtual DbSet<KitRebreakErrorPlanned> KitRebreakErrorPlanneds { get; set; }
        public virtual DbSet<KitRebreakResult> KitRebreakResults { get; set; }
        public virtual DbSet<KitRebreakResultPlanned> KitRebreakResultPlanneds { get; set; }
        public virtual DbSet<KitRepickOnRejectedDeliveryUnit> KitRepickOnRejectedDeliveryUnits { get; set; }
        public virtual DbSet<KitTransportUnit> KitTransportUnits { get; set; }
        public virtual DbSet<KitType> KitTypes { get; set; }
        public virtual DbSet<KitTypeGroup> KitTypeGroups { get; set; }
        public virtual DbSet<Label> Labels { get; set; }
        public virtual DbSet<LabelField> LabelFields { get; set; }
        public virtual DbSet<LastOperationMachining> LastOperationMachinings { get; set; }
        public virtual DbSet<List> Lists { get; set; }
        public virtual DbSet<LoadList> LoadLists { get; set; }
        public virtual DbSet<LoadListDispatchNote> LoadListDispatchNotes { get; set; }
        public virtual DbSet<LoadListItemTrpStatu> LoadListItemTrpStatus { get; set; }
        public virtual DbSet<LoadListMainItem> LoadListMainItems { get; set; }
        public virtual DbSet<LoadListStatu> LoadListStatus { get; set; }
        public virtual DbSet<LoadListSubItem> LoadListSubItems { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationBlocking> LocationBlockings { get; set; }
        public virtual DbSet<LocationBlockingCode> LocationBlockingCodes { get; set; }
        public virtual DbSet<LocationBlockingCodeDescription> LocationBlockingCodeDescriptions { get; set; }
        public virtual DbSet<LocationGroup> LocationGroups { get; set; }
        public virtual DbSet<LocationGroupBlocking> LocationGroupBlockings { get; set; }
        public virtual DbSet<LocationGroupBlockingCode> LocationGroupBlockingCodes { get; set; }
        public virtual DbSet<LocationGroupBlockingCodeDescription> LocationGroupBlockingCodeDescriptions { get; set; }
        public virtual DbSet<LocationGroupLocation> LocationGroupLocations { get; set; }
        public virtual DbSet<LocationHandling> LocationHandlings { get; set; }
        public virtual DbSet<LocationHandlingDescription> LocationHandlingDescriptions { get; set; }
        public virtual DbSet<LocationPrinter> LocationPrinters { get; set; }
        public virtual DbSet<LocationRejectCode> LocationRejectCodes { get; set; }
        public virtual DbSet<LocationStatu> LocationStatus { get; set; }
        public virtual DbSet<LocationType> LocationTypes { get; set; }
        public virtual DbSet<LocationTypeDescription> LocationTypeDescriptions { get; set; }
        public virtual DbSet<LockedExecutionOrder> LockedExecutionOrders { get; set; }
        public virtual DbSet<LockReason> LockReasons { get; set; }
        public virtual DbSet<LoosePartItem> LoosePartItems { get; set; }
        public virtual DbSet<LoosePartItemBlocking> LoosePartItemBlockings { get; set; }
        public virtual DbSet<LoosePartItemKDPick> LoosePartItemKDPicks { get; set; }
        public virtual DbSet<LoosePartItemPick> LoosePartItemPicks { get; set; }
        public virtual DbSet<LoosePartOrder> LoosePartOrders { get; set; }
        public virtual DbSet<MainPackage> MainPackages { get; set; }
        public virtual DbSet<MainPackageDeliveryRoute> MainPackageDeliveryRoutes { get; set; }
        public virtual DbSet<MainPackageLastStored> MainPackageLastStoreds { get; set; }
        public virtual DbSet<MainPackageLocation> MainPackageLocations { get; set; }
        public virtual DbSet<MainPackageOriginalPackage> MainPackageOriginalPackages { get; set; }
        public virtual DbSet<MainPackagePicking> MainPackagePickings { get; set; }
        public virtual DbSet<MainPackageVerification> MainPackageVerifications { get; set; }
        public virtual DbSet<MasterGroup> MasterGroups { get; set; }
        public virtual DbSet<MasterGroupDescripton> MasterGroupDescriptons { get; set; }
        public virtual DbSet<MasterGroupEquipment> MasterGroupEquipments { get; set; }
        public virtual DbSet<MasterGroupLocation> MasterGroupLocations { get; set; }
        public virtual DbSet<MasterType> MasterTypes { get; set; }
        public virtual DbSet<MasterTypeDescription> MasterTypeDescriptions { get; set; }
        public virtual DbSet<MaterialCheckRunning> MaterialCheckRunnings { get; set; }
        public virtual DbSet<MaterialController> MaterialControllers { get; set; }
        public virtual DbSet<MaterialHandlingCode> MaterialHandlingCodes { get; set; }
        public virtual DbSet<MaterialHandlingCodeDescription> MaterialHandlingCodeDescriptions { get; set; }
        public virtual DbSet<MaterialHandlingLotSize> MaterialHandlingLotSizes { get; set; }
        public virtual DbSet<MaterialHandlingLotSizeException> MaterialHandlingLotSizeExceptions { get; set; }
        public virtual DbSet<MeansOfTransportDispatch> MeansOfTransportDispatches { get; set; }
        public virtual DbSet<MovementWithoutTransport> MovementWithoutTransports { get; set; }
        public virtual DbSet<MRPInfoType> MRPInfoTypes { get; set; }
        public virtual DbSet<NAPEmballage> NAPEmballages { get; set; }
        public virtual DbSet<NewSequenceDeliveryUnit> NewSequenceDeliveryUnits { get; set; }
        public virtual DbSet<OrderHandlingException> OrderHandlingExceptions { get; set; }
        public virtual DbSet<PackageEmballage> PackageEmballages { get; set; }
        public virtual DbSet<PackageInformation> PackageInformations { get; set; }
        public virtual DbSet<PackageReject> PackageRejects { get; set; }
        public virtual DbSet<PackInstruction> PackInstructions { get; set; }
        public virtual DbSet<PackInstructionSubPackage> PackInstructionSubPackages { get; set; }
        public virtual DbSet<PackReferenceNumber> PackReferenceNumbers { get; set; }
        public virtual DbSet<PackReferenceNumberEmballage> PackReferenceNumberEmballages { get; set; }
        public virtual DbSet<PackType> PackTypes { get; set; }
        public virtual DbSet<PalletType> PalletTypes { get; set; }
        public virtual DbSet<PalletTypeDepartmentLevel> PalletTypeDepartmentLevels { get; set; }
        public virtual DbSet<PalletTypeMapping> PalletTypeMappings { get; set; }
        public virtual DbSet<ParameterCategory> ParameterCategories { get; set; }
        public virtual DbSet<ParameterScheduler> ParameterSchedulers { get; set; }
        public virtual DbSet<Part> Parts { get; set; }
        public virtual DbSet<PartAttribute> PartAttributes { get; set; }
        public virtual DbSet<PartCharacteristic> PartCharacteristics { get; set; }
        public virtual DbSet<PartCharacteristicException> PartCharacteristicExceptions { get; set; }
        public virtual DbSet<PartCodeDescription> PartCodeDescriptions { get; set; }
        public virtual DbSet<PartDescription> PartDescriptions { get; set; }
        public virtual DbSet<PartException> PartExceptions { get; set; }
        public virtual DbSet<PartGroupKitting> PartGroupKittings { get; set; }
        public virtual DbSet<PartOrder> PartOrders { get; set; }
        public virtual DbSet<PartOrderBooking> PartOrderBookings { get; set; }
        public virtual DbSet<PartOrderCategory> PartOrderCategories { get; set; }
        public virtual DbSet<PartOrderCategoryDescription> PartOrderCategoryDescriptions { get; set; }
        public virtual DbSet<PartOrderPartialDelivery> PartOrderPartialDeliveries { get; set; }
        public virtual DbSet<PartOrderType> PartOrderTypes { get; set; }
        public virtual DbSet<PartOrderTypeChangesAllowed> PartOrderTypeChangesAlloweds { get; set; }
        public virtual DbSet<PartOrderTypeDescription> PartOrderTypeDescriptions { get; set; }
        public virtual DbSet<PartPackabilityCode> PartPackabilityCodes { get; set; }
        public virtual DbSet<PartProcess> PartProcesses { get; set; }
        public virtual DbSet<PartProcessUsePoint> PartProcessUsePoints { get; set; }
        public virtual DbSet<PartRestriction> PartRestrictions { get; set; }
        public virtual DbSet<PartStatusDescription> PartStatusDescriptions { get; set; }
        public virtual DbSet<PartSupplier> PartSuppliers { get; set; }
        public virtual DbSet<PartUnitDescription> PartUnitDescriptions { get; set; }
        public virtual DbSet<PendingTransport> PendingTransports { get; set; }
        public virtual DbSet<PentaOrderPartNumber> PentaOrderPartNumbers { get; set; }
        public virtual DbSet<PhysicalAddressExtSystem> PhysicalAddressExtSystems { get; set; }
        public virtual DbSet<PhysicalStation> PhysicalStations { get; set; }
        public virtual DbSet<PickingGroup> PickingGroups { get; set; }
        public virtual DbSet<PickingGroupMasterGroup> PickingGroupMasterGroups { get; set; }
        public virtual DbSet<PickingInstruction> PickingInstructions { get; set; }
        public virtual DbSet<PickPackage> PickPackages { get; set; }
        public virtual DbSet<Picture> Pictures { get; set; }
        public virtual DbSet<PreliminaryDeliveryNote> PreliminaryDeliveryNotes { get; set; }
        public virtual DbSet<PreliminaryLoading> PreliminaryLoadings { get; set; }
        public virtual DbSet<Printer> Printers { get; set; }
        public virtual DbSet<PrinterType> PrinterTypes { get; set; }
        public virtual DbSet<PrinterTypeLabel> PrinterTypeLabels { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<ProcessStatu> ProcessStatus { get; set; }
        public virtual DbSet<ProductionLine> ProductionLines { get; set; }
        public virtual DbSet<ProductionUnit> ProductionUnits { get; set; }
        public virtual DbSet<ProductionUnitDocumentation> ProductionUnitDocumentations { get; set; }
        public virtual DbSet<ProfitCenter> ProfitCenters { get; set; }
        public virtual DbSet<ProfitCenterSystemParameter> ProfitCenterSystemParameters { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<QtyEmballageTypeLabelsToPrint> QtyEmballageTypeLabelsToPrints { get; set; }
        public virtual DbSet<ReceivingException> ReceivingExceptions { get; set; }
        public virtual DbSet<ReceivingStatu> ReceivingStatus { get; set; }
        public virtual DbSet<ReceivingStatusDescription> ReceivingStatusDescriptions { get; set; }
        public virtual DbSet<ReceptionPartNumber> ReceptionPartNumbers { get; set; }
        public virtual DbSet<RejectCode> RejectCodes { get; set; }
        public virtual DbSet<RejectCodeDescription> RejectCodeDescriptions { get; set; }
        public virtual DbSet<ReplenishmentTemplate> ReplenishmentTemplates { get; set; }
        public virtual DbSet<ResequenceMessage> ResequenceMessages { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RVCPartCountryOfOrigin> RVCPartCountryOfOrigins { get; set; }
        public virtual DbSet<SampleCode> SampleCodes { get; set; }
        public virtual DbSet<SatelliteStorage> SatelliteStorages { get; set; }
        public virtual DbSet<ScriptHistory> ScriptHistories { get; set; }
        public virtual DbSet<SequenceMode> SequenceModes { get; set; }
        public virtual DbSet<SequenceNumber> SequenceNumbers { get; set; }
        public virtual DbSet<SequenceNumberContinuou> SequenceNumberContinuous { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<ShipmentDispatchNote> ShipmentDispatchNotes { get; set; }
        public virtual DbSet<ShipmentDispatchNoteDetail> ShipmentDispatchNoteDetails { get; set; }
        public virtual DbSet<ShipmentDispatchNotePackage> ShipmentDispatchNotePackages { get; set; }
        public virtual DbSet<ShipmentDispatchNotePackagePart> ShipmentDispatchNotePackageParts { get; set; }
        public virtual DbSet<ShipmentDispatchNotePackagePartIncludedPart> ShipmentDispatchNotePackagePartIncludedParts { get; set; }
        public virtual DbSet<ShipmentDispatchNotePackagePartProdOrder> ShipmentDispatchNotePackagePartProdOrders { get; set; }
        public virtual DbSet<SiteSupplierDetail> SiteSupplierDetails { get; set; }
        public virtual DbSet<Station> Stations { get; set; }
        public virtual DbSet<StationChangeNote> StationChangeNotes { get; set; }
        public virtual DbSet<StationChangeNoteConnection> StationChangeNoteConnections { get; set; }
        public virtual DbSet<StationDeliveryLocation> StationDeliveryLocations { get; set; }
        public virtual DbSet<StationDeliveryLocationKit> StationDeliveryLocationKits { get; set; }
        public virtual DbSet<StationDeliveryLocationPart> StationDeliveryLocationParts { get; set; }
        public virtual DbSet<StationPart> StationParts { get; set; }
        public virtual DbSet<StationPartKit> StationPartKits { get; set; }
        public virtual DbSet<StationWorkcell> StationWorkcells { get; set; }
        public virtual DbSet<StockTaking> StockTakings { get; set; }
        public virtual DbSet<StockTakingAdjustment> StockTakingAdjustments { get; set; }
        public virtual DbSet<StockTakingLackedOrder> StockTakingLackedOrders { get; set; }
        public virtual DbSet<StockTakingState> StockTakingStates { get; set; }
        public virtual DbSet<StorageType> StorageTypes { get; set; }
        public virtual DbSet<StorageTypeDescription> StorageTypeDescriptions { get; set; }
        public virtual DbSet<StoragingAllowedElseWhere> StoragingAllowedElseWheres { get; set; }
        public virtual DbSet<SubPackage> SubPackages { get; set; }
        public virtual DbSet<SubPackageBalanceType> SubPackageBalanceTypes { get; set; }
        public virtual DbSet<SubPackageBalanceTypeDescription> SubPackageBalanceTypeDescriptions { get; set; }
        public virtual DbSet<SubPackageBlocking> SubPackageBlockings { get; set; }
        public virtual DbSet<SubPackageBlockingCode> SubPackageBlockingCodes { get; set; }
        public virtual DbSet<SubPackageBlockingCodeDescription> SubPackageBlockingCodeDescriptions { get; set; }
        public virtual DbSet<SubPackageBooking> SubPackageBookings { get; set; }
        public virtual DbSet<SubPackageBookingCode> SubPackageBookingCodes { get; set; }
        public virtual DbSet<SubPackageBookingCodeDescription> SubPackageBookingCodeDescriptions { get; set; }
        public virtual DbSet<SubPackageMessage> SubPackageMessages { get; set; }
        public virtual DbSet<SubPackageScrapping> SubPackageScrappings { get; set; }
        public virtual DbSet<SubPackageScrappingCode> SubPackageScrappingCodes { get; set; }
        public virtual DbSet<SubPackageScrappingCodeDescription> SubPackageScrappingCodeDescriptions { get; set; }
        public virtual DbSet<SubPackageStatu> SubPackageStatus { get; set; }
        public virtual DbSet<SubPackageStatusCode> SubPackageStatusCodes { get; set; }
        public virtual DbSet<SubPackageStatusCodeType> SubPackageStatusCodeTypes { get; set; }
        public virtual DbSet<Suffix> Suffixes { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SystemParameter> SystemParameters { get; set; }
        public virtual DbSet<SystemParameterValue> SystemParameterValues { get; set; }
        public virtual DbSet<Trailer> Trailers { get; set; }
        public virtual DbSet<TrailerType> TrailerTypes { get; set; }
        public virtual DbSet<TransportAssignment> TransportAssignments { get; set; }
        public virtual DbSet<TransportAssignmentCode> TransportAssignmentCodes { get; set; }
        public virtual DbSet<TransportAssignmentCodeDescription> TransportAssignmentCodeDescriptions { get; set; }
        public virtual DbSet<TransportUnit> TransportUnits { get; set; }
        public virtual DbSet<TransportUnitLoad> TransportUnitLoads { get; set; }
        public virtual DbSet<TriggerType> TriggerTypes { get; set; }
        public virtual DbSet<TypeOfOperation> TypeOfOperations { get; set; }
        public virtual DbSet<TypeOfOperationDescription> TypeOfOperationDescriptions { get; set; }
        public virtual DbSet<UnloadList> UnloadLists { get; set; }
        public virtual DbSet<UnloadListDetail> UnloadListDetails { get; set; }
        public virtual DbSet<UoMToUoPConvert> UoMToUoPConverts { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserGoodsReceivingLocation> UserGoodsReceivingLocations { get; set; }
        public virtual DbSet<UserPrinter> UserPrinters { get; set; }
        public virtual DbSet<UserSetting> UserSettings { get; set; }
        public virtual DbSet<UserUsecaseControlSetting> UserUsecaseControlSettings { get; set; }
        public virtual DbSet<ValidCostCenter> ValidCostCenters { get; set; }
        public virtual DbSet<ValidCrane> ValidCranes { get; set; }
        public virtual DbSet<ValidEquipmentType> ValidEquipmentTypes { get; set; }
        public virtual DbSet<MainPackagesForStockTakingPurpos> MainPackagesForStockTakingPurposes { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
    
        [DbFunction("MACS_ST2Entities", "FN_GetPackagesForShowPackageLocation")]
        public virtual IQueryable<FN_GetPackagesForShowPackageLocation_Result> FN_GetPackagesForShowPackageLocation(string location, string languageCode)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_GetPackagesForShowPackageLocation_Result>("[MACS_ST2Entities].[FN_GetPackagesForShowPackageLocation](@Location, @LanguageCode)", locationParameter, languageCodeParameter);
        }
    
        [DbFunction("MACS_ST2Entities", "FN_Split")]
        public virtual IQueryable<FN_Split_Result> FN_Split(string sInputList, string sDelimiter)
        {
            var sInputListParameter = sInputList != null ?
                new ObjectParameter("sInputList", sInputList) :
                new ObjectParameter("sInputList", typeof(string));
    
            var sDelimiterParameter = sDelimiter != null ?
                new ObjectParameter("sDelimiter", sDelimiter) :
                new ObjectParameter("sDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_Split_Result>("[MACS_ST2Entities].[FN_Split](@sInputList, @sDelimiter)", sInputListParameter, sDelimiterParameter);
        }
    
        public virtual int GetAutomaticTestingStatus(string controllerName, string masterGroup, string equipmentTypeID, string equipmentName, string physicalAddress, string status)
        {
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var masterGroupParameter = masterGroup != null ?
                new ObjectParameter("MasterGroup", masterGroup) :
                new ObjectParameter("MasterGroup", typeof(string));
    
            var equipmentTypeIDParameter = equipmentTypeID != null ?
                new ObjectParameter("EquipmentTypeID", equipmentTypeID) :
                new ObjectParameter("EquipmentTypeID", typeof(string));
    
            var equipmentNameParameter = equipmentName != null ?
                new ObjectParameter("EquipmentName", equipmentName) :
                new ObjectParameter("EquipmentName", typeof(string));
    
            var physicalAddressParameter = physicalAddress != null ?
                new ObjectParameter("PhysicalAddress", physicalAddress) :
                new ObjectParameter("PhysicalAddress", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAutomaticTestingStatus", controllerNameParameter, masterGroupParameter, equipmentTypeIDParameter, equipmentNameParameter, physicalAddressParameter, statusParameter);
        }
    
        public virtual int GetConnectedEquipments(string controllerName, string equipmentTypeID, string equipmentName, string physicalAddress)
        {
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var equipmentTypeIDParameter = equipmentTypeID != null ?
                new ObjectParameter("EquipmentTypeID", equipmentTypeID) :
                new ObjectParameter("EquipmentTypeID", typeof(string));
    
            var equipmentNameParameter = equipmentName != null ?
                new ObjectParameter("EquipmentName", equipmentName) :
                new ObjectParameter("EquipmentName", typeof(string));
    
            var physicalAddressParameter = physicalAddress != null ?
                new ObjectParameter("PhysicalAddress", physicalAddress) :
                new ObjectParameter("PhysicalAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConnectedEquipments", controllerNameParameter, equipmentTypeIDParameter, equipmentNameParameter, physicalAddressParameter);
        }
    
        public virtual int GetConnectedLocations(string controllerName, string equipmentTypeID, string equipmentName, string physicalAddress, string masterGroup)
        {
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var equipmentTypeIDParameter = equipmentTypeID != null ?
                new ObjectParameter("EquipmentTypeID", equipmentTypeID) :
                new ObjectParameter("EquipmentTypeID", typeof(string));
    
            var equipmentNameParameter = equipmentName != null ?
                new ObjectParameter("EquipmentName", equipmentName) :
                new ObjectParameter("EquipmentName", typeof(string));
    
            var physicalAddressParameter = physicalAddress != null ?
                new ObjectParameter("PhysicalAddress", physicalAddress) :
                new ObjectParameter("PhysicalAddress", typeof(string));
    
            var masterGroupParameter = masterGroup != null ?
                new ObjectParameter("MasterGroup", masterGroup) :
                new ObjectParameter("MasterGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConnectedLocations", controllerNameParameter, equipmentTypeIDParameter, equipmentNameParameter, physicalAddressParameter, masterGroupParameter);
        }
    
        public virtual int GetConnectedLocationsForCache()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConnectedLocationsForCache");
        }
    
        public virtual int GetKitOrderDetails(string kitID, string deliveryUnit, string masterGroup, string chassisType, string chassisId)
        {
            var kitIDParameter = kitID != null ?
                new ObjectParameter("KitID", kitID) :
                new ObjectParameter("KitID", typeof(string));
    
            var deliveryUnitParameter = deliveryUnit != null ?
                new ObjectParameter("DeliveryUnit", deliveryUnit) :
                new ObjectParameter("DeliveryUnit", typeof(string));
    
            var masterGroupParameter = masterGroup != null ?
                new ObjectParameter("MasterGroup", masterGroup) :
                new ObjectParameter("MasterGroup", typeof(string));
    
            var chassisTypeParameter = chassisType != null ?
                new ObjectParameter("ChassisType", chassisType) :
                new ObjectParameter("ChassisType", typeof(string));
    
            var chassisIdParameter = chassisId != null ?
                new ObjectParameter("ChassisId", chassisId) :
                new ObjectParameter("ChassisId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetKitOrderDetails", kitIDParameter, deliveryUnitParameter, masterGroupParameter, chassisTypeParameter, chassisIdParameter);
        }
    
        public virtual int GetOPCErrorLogs(Nullable<int> priority, string masterGroup, string deliveryUnit, string createTime)
        {
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var masterGroupParameter = masterGroup != null ?
                new ObjectParameter("MasterGroup", masterGroup) :
                new ObjectParameter("MasterGroup", typeof(string));
    
            var deliveryUnitParameter = deliveryUnit != null ?
                new ObjectParameter("DeliveryUnit", deliveryUnit) :
                new ObjectParameter("DeliveryUnit", typeof(string));
    
            var createTimeParameter = createTime != null ?
                new ObjectParameter("CreateTime", createTime) :
                new ObjectParameter("CreateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOPCErrorLogs", priorityParameter, masterGroupParameter, deliveryUnitParameter, createTimeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int USP_ActivateLocation(string storageName, string userId)
        {
            var storageNameParameter = storageName != null ?
                new ObjectParameter("StorageName", storageName) :
                new ObjectParameter("StorageName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ActivateLocation", storageNameParameter, userIdParameter);
        }
    
        public virtual ObjectResult<USP_CheckForGPackage_Result> USP_CheckForGPackage(string subPackageId, string partNumber)
        {
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CheckForGPackage_Result>("USP_CheckForGPackage", subPackageIdParameter, partNumberParameter);
        }
    
        public virtual ObjectResult<USP_CheckIfSupplierPartExists_Result> USP_CheckIfSupplierPartExists(string partNo, string supplierId, string docNo, string subPackId, string mainPackageId)
        {
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var subPackIdParameter = subPackId != null ?
                new ObjectParameter("SubPackId", subPackId) :
                new ObjectParameter("SubPackId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CheckIfSupplierPartExists_Result>("USP_CheckIfSupplierPartExists", partNoParameter, supplierIdParameter, docNoParameter, subPackIdParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> USP_CheckLocationBlockedInLocationGroup(string pLocationId, Nullable<int> locationGroupBlockCode)
        {
            var pLocationIdParameter = pLocationId != null ?
                new ObjectParameter("pLocationId", pLocationId) :
                new ObjectParameter("pLocationId", typeof(string));
    
            var locationGroupBlockCodeParameter = locationGroupBlockCode.HasValue ?
                new ObjectParameter("LocationGroupBlockCode", locationGroupBlockCode) :
                new ObjectParameter("LocationGroupBlockCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("USP_CheckLocationBlockedInLocationGroup", pLocationIdParameter, locationGroupBlockCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_CleanDespatch(Nullable<System.DateTime> cleanUpDate, Nullable<int> statusId)
        {
            var cleanUpDateParameter = cleanUpDate.HasValue ?
                new ObjectParameter("CleanUpDate", cleanUpDate) :
                new ObjectParameter("CleanUpDate", typeof(System.DateTime));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_CleanDespatch", cleanUpDateParameter, statusIdParameter);
        }
    
        public virtual int USP_Delete_Transport_Assignment(Nullable<int> tranportAssignmentId)
        {
            var tranportAssignmentIdParameter = tranportAssignmentId.HasValue ?
                new ObjectParameter("TranportAssignmentId", tranportAssignmentId) :
                new ObjectParameter("TranportAssignmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Delete_Transport_Assignment", tranportAssignmentIdParameter);
        }
    
        public virtual int USP_DeleteAsn(Nullable<int> aSNId, string user, Nullable<int> rejCode)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var rejCodeParameter = rejCode.HasValue ?
                new ObjectParameter("RejCode", rejCode) :
                new ObjectParameter("RejCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteAsn", aSNIdParameter, userParameter, rejCodeParameter);
        }
    
        public virtual int USP_DeleteAsnOnAdjustPackage(Nullable<int> aSNId)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteAsnOnAdjustPackage", aSNIdParameter);
        }
    
        public virtual int USP_DeleteAsnPackages(string aSNMainPackageId, string user)
        {
            var aSNMainPackageIdParameter = aSNMainPackageId != null ?
                new ObjectParameter("ASNMainPackageId", aSNMainPackageId) :
                new ObjectParameter("ASNMainPackageId", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteAsnPackages", aSNMainPackageIdParameter, userParameter);
        }
    
        public virtual int USP_DeleteAutoScannerData(string pMainPackageId, string pSupplierId)
        {
            var pMainPackageIdParameter = pMainPackageId != null ?
                new ObjectParameter("pMainPackageId", pMainPackageId) :
                new ObjectParameter("pMainPackageId", typeof(string));
    
            var pSupplierIdParameter = pSupplierId != null ?
                new ObjectParameter("pSupplierId", pSupplierId) :
                new ObjectParameter("pSupplierId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteAutoScannerData", pMainPackageIdParameter, pSupplierIdParameter);
        }
    
        public virtual int USP_DeleteChildren_SubPackage(string supplierId, string subPackageId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteChildren_SubPackage", supplierIdParameter, subPackageIdParameter);
        }
    
        public virtual int USP_DeleteDeliveryUnitAndDeliveryUnitPart(string deliveryUnitIds)
        {
            var deliveryUnitIdsParameter = deliveryUnitIds != null ?
                new ObjectParameter("DeliveryUnitIds", deliveryUnitIds) :
                new ObjectParameter("DeliveryUnitIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteDeliveryUnitAndDeliveryUnitPart", deliveryUnitIdsParameter);
        }
    
        public virtual int USP_DeleteDeliveryUnitStructure(string deliveryUnitIds)
        {
            var deliveryUnitIdsParameter = deliveryUnitIds != null ?
                new ObjectParameter("DeliveryUnitIds", deliveryUnitIds) :
                new ObjectParameter("DeliveryUnitIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteDeliveryUnitStructure", deliveryUnitIdsParameter);
        }
    
        public virtual int USP_DeleteDeliveryUnitStructureAndKit(string deliveryUnitIds)
        {
            var deliveryUnitIdsParameter = deliveryUnitIds != null ?
                new ObjectParameter("DeliveryUnitIds", deliveryUnitIds) :
                new ObjectParameter("DeliveryUnitIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteDeliveryUnitStructureAndKit", deliveryUnitIdsParameter);
        }
    
        public virtual int USP_DeleteInternalLoosepartOrders(string cPOId)
        {
            var cPOIdParameter = cPOId != null ?
                new ObjectParameter("CPOId", cPOId) :
                new ObjectParameter("CPOId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteInternalLoosepartOrders", cPOIdParameter);
        }
    
        public virtual int USP_DeleteKit(string kitId)
        {
            var kitIdParameter = kitId != null ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteKit", kitIdParameter);
        }
    
        public virtual int USP_DeleteLocation_Cascade(string locationId)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteLocation_Cascade", locationIdParameter);
        }
    
        public virtual int USP_DeleteMainPackage(string supplierId, string mainPackageId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteMainPackage", supplierIdParameter, mainPackageIdParameter);
        }
    
        public virtual int USP_DeletePartCharacteristicException(string receivingCostCenter, string partNumber, Nullable<int> statusOfPackage)
        {
            var receivingCostCenterParameter = receivingCostCenter != null ?
                new ObjectParameter("ReceivingCostCenter", receivingCostCenter) :
                new ObjectParameter("ReceivingCostCenter", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var statusOfPackageParameter = statusOfPackage.HasValue ?
                new ObjectParameter("StatusOfPackage", statusOfPackage) :
                new ObjectParameter("StatusOfPackage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeletePartCharacteristicException", receivingCostCenterParameter, partNumberParameter, statusOfPackageParameter);
        }
    
        public virtual int USP_DeletePartOrder(string partOrderNumber)
        {
            var partOrderNumberParameter = partOrderNumber != null ?
                new ObjectParameter("PartOrderNumber", partOrderNumber) :
                new ObjectParameter("PartOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeletePartOrder", partOrderNumberParameter);
        }
    
        public virtual int USP_DeleteSubPackage(string supplierId, string subPackageId, string mainPackageId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteSubPackage", supplierIdParameter, subPackageIdParameter, mainPackageIdParameter);
        }
    
        public virtual int USP_DeleteUnloadListDetails(Nullable<int> unloadId)
        {
            var unloadIdParameter = unloadId.HasValue ?
                new ObjectParameter("UnloadId", unloadId) :
                new ObjectParameter("UnloadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteUnloadListDetails", unloadIdParameter);
        }
    
        public virtual ObjectResult<USP_EditableConditionCondition_Result> USP_EditableConditionCondition(string newLocation, string oldLocation, string supplier, string mainPackageId)
        {
            var newLocationParameter = newLocation != null ?
                new ObjectParameter("NewLocation", newLocation) :
                new ObjectParameter("NewLocation", typeof(string));
    
            var oldLocationParameter = oldLocation != null ?
                new ObjectParameter("OldLocation", oldLocation) :
                new ObjectParameter("OldLocation", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_EditableConditionCondition_Result>("USP_EditableConditionCondition", newLocationParameter, oldLocationParameter, supplierParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_GenerateLocationIntrvlByParameter_Result> USP_GenerateLocationIntrvlByParameter(string department, string fromRack, string toRack, string fromSurface, string toSurface, string fromRackLevel, string toRackLevel, string fromLocationDepth, string toLocationDepth, Nullable<int> locationGroupId, ObjectParameter strerrMsg)
        {
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var fromRackParameter = fromRack != null ?
                new ObjectParameter("FromRack", fromRack) :
                new ObjectParameter("FromRack", typeof(string));
    
            var toRackParameter = toRack != null ?
                new ObjectParameter("ToRack", toRack) :
                new ObjectParameter("ToRack", typeof(string));
    
            var fromSurfaceParameter = fromSurface != null ?
                new ObjectParameter("FromSurface", fromSurface) :
                new ObjectParameter("FromSurface", typeof(string));
    
            var toSurfaceParameter = toSurface != null ?
                new ObjectParameter("ToSurface", toSurface) :
                new ObjectParameter("ToSurface", typeof(string));
    
            var fromRackLevelParameter = fromRackLevel != null ?
                new ObjectParameter("FromRackLevel", fromRackLevel) :
                new ObjectParameter("FromRackLevel", typeof(string));
    
            var toRackLevelParameter = toRackLevel != null ?
                new ObjectParameter("ToRackLevel", toRackLevel) :
                new ObjectParameter("ToRackLevel", typeof(string));
    
            var fromLocationDepthParameter = fromLocationDepth != null ?
                new ObjectParameter("FromLocationDepth", fromLocationDepth) :
                new ObjectParameter("FromLocationDepth", typeof(string));
    
            var toLocationDepthParameter = toLocationDepth != null ?
                new ObjectParameter("ToLocationDepth", toLocationDepth) :
                new ObjectParameter("ToLocationDepth", typeof(string));
    
            var locationGroupIdParameter = locationGroupId.HasValue ?
                new ObjectParameter("LocationGroupId", locationGroupId) :
                new ObjectParameter("LocationGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GenerateLocationIntrvlByParameter_Result>("USP_GenerateLocationIntrvlByParameter", departmentParameter, fromRackParameter, toRackParameter, fromSurfaceParameter, toSurfaceParameter, fromRackLevelParameter, toRackLevelParameter, fromLocationDepthParameter, toLocationDepthParameter, locationGroupIdParameter, strerrMsg);
        }
    
        public virtual int USP_GenerateLocationLocIntrvl(string fromLocation, string tolocation, Nullable<int> locationGroupId, ObjectParameter strerrMsg)
        {
            var fromLocationParameter = fromLocation != null ?
                new ObjectParameter("FromLocation", fromLocation) :
                new ObjectParameter("FromLocation", typeof(string));
    
            var tolocationParameter = tolocation != null ?
                new ObjectParameter("Tolocation", tolocation) :
                new ObjectParameter("Tolocation", typeof(string));
    
            var locationGroupIdParameter = locationGroupId.HasValue ?
                new ObjectParameter("LocationGroupId", locationGroupId) :
                new ObjectParameter("LocationGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GenerateLocationLocIntrvl", fromLocationParameter, tolocationParameter, locationGroupIdParameter, strerrMsg);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Get_Available_Inventory_For_Parnumber_And_Storage(string partNumber, string storageType, string department)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var storageTypeParameter = storageType != null ?
                new ObjectParameter("StorageType", storageType) :
                new ObjectParameter("StorageType", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Get_Available_Inventory_For_Parnumber_And_Storage", partNumberParameter, storageTypeParameter, departmentParameter);
        }
    
        public virtual ObjectResult<USP_Get_FreeLocation_Result> USP_Get_FreeLocation(string partNumber, string packageId, Nullable<int> mAXPALLETFRAMES)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            var mAXPALLETFRAMESParameter = mAXPALLETFRAMES.HasValue ?
                new ObjectParameter("MAXPALLETFRAMES", mAXPALLETFRAMES) :
                new ObjectParameter("MAXPALLETFRAMES", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Get_FreeLocation_Result>("USP_Get_FreeLocation", partNumberParameter, packageIdParameter, mAXPALLETFRAMESParameter);
        }
    
        public virtual ObjectResult<string> USP_Get_FreeLocation_In_P_Q_Type_Storage(string dept, Nullable<int> zONE_NO, string locationDepth, Nullable<int> mINPALLETFRAME, Nullable<int> mAXPALLETFRAME, string locType, Nullable<int> lOCATIONPACKAGEHANDLING, Nullable<int> nOOFSUBPACK)
        {
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var zONE_NOParameter = zONE_NO.HasValue ?
                new ObjectParameter("ZONE_NO", zONE_NO) :
                new ObjectParameter("ZONE_NO", typeof(int));
    
            var locationDepthParameter = locationDepth != null ?
                new ObjectParameter("LocationDepth", locationDepth) :
                new ObjectParameter("LocationDepth", typeof(string));
    
            var mINPALLETFRAMEParameter = mINPALLETFRAME.HasValue ?
                new ObjectParameter("MINPALLETFRAME", mINPALLETFRAME) :
                new ObjectParameter("MINPALLETFRAME", typeof(int));
    
            var mAXPALLETFRAMEParameter = mAXPALLETFRAME.HasValue ?
                new ObjectParameter("MAXPALLETFRAME", mAXPALLETFRAME) :
                new ObjectParameter("MAXPALLETFRAME", typeof(int));
    
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            var lOCATIONPACKAGEHANDLINGParameter = lOCATIONPACKAGEHANDLING.HasValue ?
                new ObjectParameter("LOCATIONPACKAGEHANDLING", lOCATIONPACKAGEHANDLING) :
                new ObjectParameter("LOCATIONPACKAGEHANDLING", typeof(int));
    
            var nOOFSUBPACKParameter = nOOFSUBPACK.HasValue ?
                new ObjectParameter("NOOFSUBPACK", nOOFSUBPACK) :
                new ObjectParameter("NOOFSUBPACK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Get_FreeLocation_In_P_Q_Type_Storage", deptParameter, zONE_NOParameter, locationDepthParameter, mINPALLETFRAMEParameter, mAXPALLETFRAMEParameter, locTypeParameter, lOCATIONPACKAGEHANDLINGParameter, nOOFSUBPACKParameter);
        }
    
        public virtual ObjectResult<string> USP_Get_FreeLocation_In_S_Type_Storage(string dept, Nullable<int> zONE_NO, Nullable<int> locationDepth, Nullable<int> mINPALLETFRAME, Nullable<int> mAXPALLETFRAME, Nullable<int> lOCATIONPACKAGEHANDLING)
        {
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var zONE_NOParameter = zONE_NO.HasValue ?
                new ObjectParameter("ZONE_NO", zONE_NO) :
                new ObjectParameter("ZONE_NO", typeof(int));
    
            var locationDepthParameter = locationDepth.HasValue ?
                new ObjectParameter("LocationDepth", locationDepth) :
                new ObjectParameter("LocationDepth", typeof(int));
    
            var mINPALLETFRAMEParameter = mINPALLETFRAME.HasValue ?
                new ObjectParameter("MINPALLETFRAME", mINPALLETFRAME) :
                new ObjectParameter("MINPALLETFRAME", typeof(int));
    
            var mAXPALLETFRAMEParameter = mAXPALLETFRAME.HasValue ?
                new ObjectParameter("MAXPALLETFRAME", mAXPALLETFRAME) :
                new ObjectParameter("MAXPALLETFRAME", typeof(int));
    
            var lOCATIONPACKAGEHANDLINGParameter = lOCATIONPACKAGEHANDLING.HasValue ?
                new ObjectParameter("LOCATIONPACKAGEHANDLING", lOCATIONPACKAGEHANDLING) :
                new ObjectParameter("LOCATIONPACKAGEHANDLING", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Get_FreeLocation_In_S_Type_Storage", deptParameter, zONE_NOParameter, locationDepthParameter, mINPALLETFRAMEParameter, mAXPALLETFRAMEParameter, lOCATIONPACKAGEHANDLINGParameter);
        }
    
        public virtual ObjectResult<USP_Get_P_Q_Location_In_Use_Result> USP_Get_P_Q_Location_In_Use(string locationDepth, string dept, string locType, string partNumber, string mHU, Nullable<int> lOCATIONPACKAGEHANDLING, Nullable<int> zONE)
        {
            var locationDepthParameter = locationDepth != null ?
                new ObjectParameter("LocationDepth", locationDepth) :
                new ObjectParameter("LocationDepth", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var lOCATIONPACKAGEHANDLINGParameter = lOCATIONPACKAGEHANDLING.HasValue ?
                new ObjectParameter("LOCATIONPACKAGEHANDLING", lOCATIONPACKAGEHANDLING) :
                new ObjectParameter("LOCATIONPACKAGEHANDLING", typeof(int));
    
            var zONEParameter = zONE.HasValue ?
                new ObjectParameter("ZONE", zONE) :
                new ObjectParameter("ZONE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Get_P_Q_Location_In_Use_Result>("USP_Get_P_Q_Location_In_Use", locationDepthParameter, deptParameter, locTypeParameter, partNumberParameter, mHUParameter, lOCATIONPACKAGEHANDLINGParameter, zONEParameter);
        }
    
        public virtual ObjectResult<USP_Get_Prefered_Printer_Result> USP_Get_Prefered_Printer(string userId, string locationId, string labelName)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var labelNameParameter = labelName != null ?
                new ObjectParameter("LabelName", labelName) :
                new ObjectParameter("LabelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Get_Prefered_Printer_Result>("USP_Get_Prefered_Printer", userIdParameter, locationIdParameter, labelNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Get_Summarized_OrderQty_And_Balance_For_Part_Department(string partNumber, string departmentId, Nullable<bool> partOrderTypeExistsInRep, Nullable<bool> includePartOrderCount, Nullable<int> replenishmentMode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var partOrderTypeExistsInRepParameter = partOrderTypeExistsInRep.HasValue ?
                new ObjectParameter("PartOrderTypeExistsInRep", partOrderTypeExistsInRep) :
                new ObjectParameter("PartOrderTypeExistsInRep", typeof(bool));
    
            var includePartOrderCountParameter = includePartOrderCount.HasValue ?
                new ObjectParameter("IncludePartOrderCount", includePartOrderCount) :
                new ObjectParameter("IncludePartOrderCount", typeof(bool));
    
            var replenishmentModeParameter = replenishmentMode.HasValue ?
                new ObjectParameter("ReplenishmentMode", replenishmentMode) :
                new ObjectParameter("ReplenishmentMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Get_Summarized_OrderQty_And_Balance_For_Part_Department", partNumberParameter, departmentIdParameter, partOrderTypeExistsInRepParameter, includePartOrderCountParameter, replenishmentModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Get_Summarized_OrderQty_And_Balance_For_Part_Department_Kanban(string partNumber, string departmentId, Nullable<bool> partOrderTypeExistsInRep, Nullable<bool> includePartOrderCount, Nullable<int> replenishmentMode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var partOrderTypeExistsInRepParameter = partOrderTypeExistsInRep.HasValue ?
                new ObjectParameter("PartOrderTypeExistsInRep", partOrderTypeExistsInRep) :
                new ObjectParameter("PartOrderTypeExistsInRep", typeof(bool));
    
            var includePartOrderCountParameter = includePartOrderCount.HasValue ?
                new ObjectParameter("IncludePartOrderCount", includePartOrderCount) :
                new ObjectParameter("IncludePartOrderCount", typeof(bool));
    
            var replenishmentModeParameter = replenishmentMode.HasValue ?
                new ObjectParameter("ReplenishmentMode", replenishmentMode) :
                new ObjectParameter("ReplenishmentMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Get_Summarized_OrderQty_And_Balance_For_Part_Department_Kanban", partNumberParameter, departmentIdParameter, partOrderTypeExistsInRepParameter, includePartOrderCountParameter, replenishmentModeParameter);
        }
    
        public virtual int USP_GetAllAsn(Nullable<int> flightExpressId, string supplierId, string shipmentNoticeId, string carrierName, string partNumber, Nullable<int> receiveStatus, string trailerId, string entryDocument, string siteId)
        {
            var flightExpressIdParameter = flightExpressId.HasValue ?
                new ObjectParameter("FlightExpressId", flightExpressId) :
                new ObjectParameter("FlightExpressId", typeof(int));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var shipmentNoticeIdParameter = shipmentNoticeId != null ?
                new ObjectParameter("ShipmentNoticeId", shipmentNoticeId) :
                new ObjectParameter("ShipmentNoticeId", typeof(string));
    
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var receiveStatusParameter = receiveStatus.HasValue ?
                new ObjectParameter("ReceiveStatus", receiveStatus) :
                new ObjectParameter("ReceiveStatus", typeof(int));
    
            var trailerIdParameter = trailerId != null ?
                new ObjectParameter("TrailerId", trailerId) :
                new ObjectParameter("TrailerId", typeof(string));
    
            var entryDocumentParameter = entryDocument != null ?
                new ObjectParameter("EntryDocument", entryDocument) :
                new ObjectParameter("EntryDocument", typeof(string));
    
            var siteIdParameter = siteId != null ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllAsn", flightExpressIdParameter, supplierIdParameter, shipmentNoticeIdParameter, carrierNameParameter, partNumberParameter, receiveStatusParameter, trailerIdParameter, entryDocumentParameter, siteIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllAsnByAsnId_Result> USP_GetAllAsnByAsnId(Nullable<int> aSNId)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllAsnByAsnId_Result>("USP_GetAllAsnByAsnId", aSNIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllAsnMainPackagesAgainst_AsnPartSupplier_Result> USP_GetAllAsnMainPackagesAgainst_AsnPartSupplier(Nullable<int> aSNId, string supplierId, string partNumber)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllAsnMainPackagesAgainst_AsnPartSupplier_Result>("USP_GetAllAsnMainPackagesAgainst_AsnPartSupplier", aSNIdParameter, supplierIdParameter, partNumberParameter);
        }
    
        public virtual int USP_GetAllAsnSubPackageByAsn(string aSNNum)
        {
            var aSNNumParameter = aSNNum != null ?
                new ObjectParameter("ASNNum", aSNNum) :
                new ObjectParameter("ASNNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllAsnSubPackageByAsn", aSNNumParameter);
        }
    
        public virtual int USP_GetAllAsnSubPackageByConsNum(string consNum)
        {
            var consNumParameter = consNum != null ?
                new ObjectParameter("ConsNum", consNum) :
                new ObjectParameter("ConsNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllAsnSubPackageByConsNum", consNumParameter);
        }
    
        public virtual int USP_GetAllAsnSubPackageByPartNum(string partNum, Nullable<int> aSNId, string mainPackageId)
        {
            var partNumParameter = partNum != null ?
                new ObjectParameter("PartNum", partNum) :
                new ObjectParameter("PartNum", typeof(string));
    
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllAsnSubPackageByPartNum", partNumParameter, aSNIdParameter, mainPackageIdParameter);
        }
    
        public virtual int USP_GetAllAsnToSendToICS(Nullable<int> aSNId)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllAsnToSendToICS", aSNIdParameter);
        }
    
        public virtual int USP_GetAllAsnToSendToICSByPackage(Nullable<int> mainPackNums)
        {
            var mainPackNumsParameter = mainPackNums.HasValue ?
                new ObjectParameter("MainPackNums", mainPackNums) :
                new ObjectParameter("MainPackNums", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllAsnToSendToICSByPackage", mainPackNumsParameter);
        }
    
        public virtual int USP_GetAllAsnToSendToMMS(Nullable<int> aSNId)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllAsnToSendToMMS", aSNIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllAvailableParts_Result> USP_GetAllAvailableParts(Nullable<int> line, string stationId, string partNumber, string languageCode)
        {
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            var stationIdParameter = stationId != null ?
                new ObjectParameter("StationId", stationId) :
                new ObjectParameter("StationId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllAvailableParts_Result>("USP_GetAllAvailableParts", lineParameter, stationIdParameter, partNumberParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllBlockingCodes_Result> USP_GetAllBlockingCodes(string locationId)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllBlockingCodes_Result>("USP_GetAllBlockingCodes", locationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllCarrierByName_Result> USP_GetAllCarrierByName(string carrierName)
        {
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllCarrierByName_Result>("USP_GetAllCarrierByName", carrierNameParameter);
        }
    
        public virtual ObjectResult<USP_GetAllCostCntrMtrlCodeException_Result> USP_GetAllCostCntrMtrlCodeException(string departmentId, string materialHandlingCode)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var materialHandlingCodeParameter = materialHandlingCode != null ?
                new ObjectParameter("MaterialHandlingCode", materialHandlingCode) :
                new ObjectParameter("MaterialHandlingCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllCostCntrMtrlCodeException_Result>("USP_GetAllCostCntrMtrlCodeException", departmentIdParameter, materialHandlingCodeParameter);
        }
    
        public virtual ObjectResult<string> USP_GetAllDeliveryLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetAllDeliveryLocation");
        }
    
        public virtual ObjectResult<USP_GetAllDepartments_Result> USP_GetAllDepartments(string dept, string profitCenter, string fACTORYCODE, string costCenter)
        {
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var profitCenterParameter = profitCenter != null ?
                new ObjectParameter("ProfitCenter", profitCenter) :
                new ObjectParameter("ProfitCenter", typeof(string));
    
            var fACTORYCODEParameter = fACTORYCODE != null ?
                new ObjectParameter("FACTORYCODE", fACTORYCODE) :
                new ObjectParameter("FACTORYCODE", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllDepartments_Result>("USP_GetAllDepartments", deptParameter, profitCenterParameter, fACTORYCODEParameter, costCenterParameter);
        }
    
        public virtual ObjectResult<USP_GetAllDuplicateLabelPackage_Result> USP_GetAllDuplicateLabelPackage(string partNumber, string mainPackageId, string subPackageId, string mainPackageSupplier, string subPackageSupplier)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var mainPackageSupplierParameter = mainPackageSupplier != null ?
                new ObjectParameter("MainPackageSupplier", mainPackageSupplier) :
                new ObjectParameter("MainPackageSupplier", typeof(string));
    
            var subPackageSupplierParameter = subPackageSupplier != null ?
                new ObjectParameter("SubPackageSupplier", subPackageSupplier) :
                new ObjectParameter("SubPackageSupplier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllDuplicateLabelPackage_Result>("USP_GetAllDuplicateLabelPackage", partNumberParameter, mainPackageIdParameter, subPackageIdParameter, mainPackageSupplierParameter, subPackageSupplierParameter);
        }
    
        public virtual ObjectResult<USP_GetAllFeedbackLocation_Result> USP_GetAllFeedbackLocation(string costCenter, string feedbackLocation, string languageCode)
        {
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var feedbackLocationParameter = feedbackLocation != null ?
                new ObjectParameter("FeedbackLocation", feedbackLocation) :
                new ObjectParameter("FeedbackLocation", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllFeedbackLocation_Result>("USP_GetAllFeedbackLocation", costCenterParameter, feedbackLocationParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllFirstOperation_Result> USP_GetAllFirstOperation(string partNumber, string languageCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllFirstOperation_Result>("USP_GetAllFirstOperation", partNumberParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllFunction_Result> USP_GetAllFunction(string parameterId)
        {
            var parameterIdParameter = parameterId != null ?
                new ObjectParameter("ParameterId", parameterId) :
                new ObjectParameter("ParameterId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllFunction_Result>("USP_GetAllFunction", parameterIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllInventoryWithdrawal_Result> USP_GetAllInventoryWithdrawal(string locationId, string receivingDepartment, string mtrlHandlingCode, string languageCode)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var receivingDepartmentParameter = receivingDepartment != null ?
                new ObjectParameter("ReceivingDepartment", receivingDepartment) :
                new ObjectParameter("ReceivingDepartment", typeof(string));
    
            var mtrlHandlingCodeParameter = mtrlHandlingCode != null ?
                new ObjectParameter("MtrlHandlingCode", mtrlHandlingCode) :
                new ObjectParameter("MtrlHandlingCode", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllInventoryWithdrawal_Result>("USP_GetAllInventoryWithdrawal", locationIdParameter, receivingDepartmentParameter, mtrlHandlingCodeParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllInventoryWithdrawalTypeWithDesc_Result> USP_GetAllInventoryWithdrawalTypeWithDesc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllInventoryWithdrawalTypeWithDesc_Result>("USP_GetAllInventoryWithdrawalTypeWithDesc");
        }
    
        public virtual ObjectResult<USP_GetAllLastOperation_Result> USP_GetAllLastOperation(string partNumber, string repackingLocation, string languageCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var repackingLocationParameter = repackingLocation != null ?
                new ObjectParameter("RepackingLocation", repackingLocation) :
                new ObjectParameter("RepackingLocation", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllLastOperation_Result>("USP_GetAllLastOperation", partNumberParameter, repackingLocationParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllLocationForLocType_Result> USP_GetAllLocationForLocType(string owningDepartment, Nullable<int> locationPackageHandling)
        {
            var owningDepartmentParameter = owningDepartment != null ?
                new ObjectParameter("OwningDepartment", owningDepartment) :
                new ObjectParameter("OwningDepartment", typeof(string));
    
            var locationPackageHandlingParameter = locationPackageHandling.HasValue ?
                new ObjectParameter("LocationPackageHandling", locationPackageHandling) :
                new ObjectParameter("LocationPackageHandling", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllLocationForLocType_Result>("USP_GetAllLocationForLocType", owningDepartmentParameter, locationPackageHandlingParameter);
        }
    
        public virtual ObjectResult<USP_GetAllLocationMtrlCodeException_Result> USP_GetAllLocationMtrlCodeException(string locationId, string materialHandlingCode)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var materialHandlingCodeParameter = materialHandlingCode != null ?
                new ObjectParameter("MaterialHandlingCode", materialHandlingCode) :
                new ObjectParameter("MaterialHandlingCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllLocationMtrlCodeException_Result>("USP_GetAllLocationMtrlCodeException", locationIdParameter, materialHandlingCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllLocationPartException_Result> USP_GetAllLocationPartException(string locationId, string partNumber, string languageCode)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllLocationPartException_Result>("USP_GetAllLocationPartException", locationIdParameter, partNumberParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllMainPackageForAsn_Result> USP_GetAllMainPackageForAsn(Nullable<int> aSNId, Nullable<bool> cHECKPREORDER)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var cHECKPREORDERParameter = cHECKPREORDER.HasValue ?
                new ObjectParameter("CHECKPREORDER", cHECKPREORDER) :
                new ObjectParameter("CHECKPREORDER", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllMainPackageForAsn_Result>("USP_GetAllMainPackageForAsn", aSNIdParameter, cHECKPREORDERParameter);
        }
    
        public virtual ObjectResult<USP_GetAllMasterGroupLocations_Result> USP_GetAllMasterGroupLocations(string masterGroupId, string languageCode)
        {
            var masterGroupIdParameter = masterGroupId != null ?
                new ObjectParameter("MasterGroupId", masterGroupId) :
                new ObjectParameter("MasterGroupId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllMasterGroupLocations_Result>("USP_GetAllMasterGroupLocations", masterGroupIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllMasterGroups_Result> USP_GetAllMasterGroups(string masterGroupId, string languageCode)
        {
            var masterGroupIdParameter = masterGroupId != null ?
                new ObjectParameter("MasterGroupId", masterGroupId) :
                new ObjectParameter("MasterGroupId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllMasterGroups_Result>("USP_GetAllMasterGroups", masterGroupIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllPalletTypeById_Result> USP_GetAllPalletTypeById(string palletType, Nullable<int> palletFrames)
        {
            var palletTypeParameter = palletType != null ?
                new ObjectParameter("PalletType", palletType) :
                new ObjectParameter("PalletType", typeof(string));
    
            var palletFramesParameter = palletFrames.HasValue ?
                new ObjectParameter("PalletFrames", palletFrames) :
                new ObjectParameter("PalletFrames", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllPalletTypeById_Result>("USP_GetAllPalletTypeById", palletTypeParameter, palletFramesParameter);
        }
    
        public virtual ObjectResult<USP_GetAllParameterUsecase_Result> USP_GetAllParameterUsecase(string parameterId)
        {
            var parameterIdParameter = parameterId != null ?
                new ObjectParameter("ParameterId", parameterId) :
                new ObjectParameter("ParameterId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllParameterUsecase_Result>("USP_GetAllParameterUsecase", parameterIdParameter);
        }
    
        public virtual int USP_GetAllPartBusiness(string receivingCostCenter, string partNumber, string languageCode)
        {
            var receivingCostCenterParameter = receivingCostCenter != null ?
                new ObjectParameter("ReceivingCostCenter", receivingCostCenter) :
                new ObjectParameter("ReceivingCostCenter", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllPartBusiness", receivingCostCenterParameter, partNumberParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetAllPartByAsnId_Result> USP_GetAllPartByAsnId(Nullable<int> aSNId)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllPartByAsnId_Result>("USP_GetAllPartByAsnId", aSNIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllPartCharacteristicException_Result> USP_GetAllPartCharacteristicException(string recivingCostCenter, string partNumber)
        {
            var recivingCostCenterParameter = recivingCostCenter != null ?
                new ObjectParameter("RecivingCostCenter", recivingCostCenter) :
                new ObjectParameter("RecivingCostCenter", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllPartCharacteristicException_Result>("USP_GetAllPartCharacteristicException", recivingCostCenterParameter, partNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetAllPartSupplier_Result> USP_GetAllPartSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllPartSupplier_Result>("USP_GetAllPartSupplier");
        }
    
        public virtual ObjectResult<USP_GetAllReceivingExceptionLocations_Result> USP_GetAllReceivingExceptionLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllReceivingExceptionLocations_Result>("USP_GetAllReceivingExceptionLocations");
        }
    
        public virtual ObjectResult<USP_GetAllRequestPackageTransport_Result> USP_GetAllRequestPackageTransport(string costCenter, string partNumber, Nullable<System.DateTime> dateFIFO, string mHU, string languageCode, string batchNumber)
        {
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var dateFIFOParameter = dateFIFO.HasValue ?
                new ObjectParameter("DateFIFO", dateFIFO) :
                new ObjectParameter("DateFIFO", typeof(System.DateTime));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllRequestPackageTransport_Result>("USP_GetAllRequestPackageTransport", costCenterParameter, partNumberParameter, dateFIFOParameter, mHUParameter, languageCodeParameter, batchNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetAllSatelliteStorageById_Result> USP_GetAllSatelliteStorageById(string storageId)
        {
            var storageIdParameter = storageId != null ?
                new ObjectParameter("StorageId", storageId) :
                new ObjectParameter("StorageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllSatelliteStorageById_Result>("USP_GetAllSatelliteStorageById", storageIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllSubPackageDetailSwith_MainPkgId_SupplierId_Result> USP_GetAllSubPackageDetailSwith_MainPkgId_SupplierId(string mainPackageId, string mainPackageSupplierId)
        {
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllSubPackageDetailSwith_MainPkgId_SupplierId_Result>("USP_GetAllSubPackageDetailSwith_MainPkgId_SupplierId", mainPackageIdParameter, mainPackageSupplierIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllSubPackageStatus_Result> USP_GetAllSubPackageStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllSubPackageStatus_Result>("USP_GetAllSubPackageStatus");
        }
    
        public virtual ObjectResult<USP_GetAllSubPackageStatusCode_Result> USP_GetAllSubPackageStatusCode(Nullable<int> subPackageStatusCodeId)
        {
            var subPackageStatusCodeIdParameter = subPackageStatusCodeId.HasValue ?
                new ObjectParameter("SubPackageStatusCodeId", subPackageStatusCodeId) :
                new ObjectParameter("SubPackageStatusCodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllSubPackageStatusCode_Result>("USP_GetAllSubPackageStatusCode", subPackageStatusCodeIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllSupplierByNumber_Result> USP_GetAllSupplierByNumber(string supplierId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllSupplierByNumber_Result>("USP_GetAllSupplierByNumber", supplierIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllSystemParameter_Result> USP_GetAllSystemParameter(string parameter)
        {
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllSystemParameter_Result>("USP_GetAllSystemParameter", parameterParameter);
        }
    
        public virtual ObjectResult<USP_GetAllSystemParameters_Result> USP_GetAllSystemParameters(Nullable<bool> superUser, string parameterId)
        {
            var superUserParameter = superUser.HasValue ?
                new ObjectParameter("SuperUser", superUser) :
                new ObjectParameter("SuperUser", typeof(bool));
    
            var parameterIdParameter = parameterId != null ?
                new ObjectParameter("ParameterId", parameterId) :
                new ObjectParameter("ParameterId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllSystemParameters_Result>("USP_GetAllSystemParameters", superUserParameter, parameterIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllTransportAssignmentsBy_Id_PkgNo_Delloc_Result> USP_GetAllTransportAssignmentsBy_Id_PkgNo_Delloc(string transportAssignmentId, string packageNumber, string deliveryLocation, string pickUpLocation)
        {
            var transportAssignmentIdParameter = transportAssignmentId != null ?
                new ObjectParameter("TransportAssignmentId", transportAssignmentId) :
                new ObjectParameter("TransportAssignmentId", typeof(string));
    
            var packageNumberParameter = packageNumber != null ?
                new ObjectParameter("PackageNumber", packageNumber) :
                new ObjectParameter("PackageNumber", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var pickUpLocationParameter = pickUpLocation != null ?
                new ObjectParameter("PickUpLocation", pickUpLocation) :
                new ObjectParameter("PickUpLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllTransportAssignmentsBy_Id_PkgNo_Delloc_Result>("USP_GetAllTransportAssignmentsBy_Id_PkgNo_Delloc", transportAssignmentIdParameter, packageNumberParameter, deliveryLocationParameter, pickUpLocationParameter);
        }
    
        public virtual ObjectResult<USP_GetAllTransportAssignmentsById_Result> USP_GetAllTransportAssignmentsById(string transportAssignmentId, string packageNumber, string deliveryLocation)
        {
            var transportAssignmentIdParameter = transportAssignmentId != null ?
                new ObjectParameter("TransportAssignmentId", transportAssignmentId) :
                new ObjectParameter("TransportAssignmentId", typeof(string));
    
            var packageNumberParameter = packageNumber != null ?
                new ObjectParameter("PackageNumber", packageNumber) :
                new ObjectParameter("PackageNumber", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllTransportAssignmentsById_Result>("USP_GetAllTransportAssignmentsById", transportAssignmentIdParameter, packageNumberParameter, deliveryLocationParameter);
        }
    
        public virtual ObjectResult<USP_GetAlreadyExistingAsnPart_Result> USP_GetAlreadyExistingAsnPart(Nullable<int> aSNId, string partNumber, string materialHandlingUnit)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var materialHandlingUnitParameter = materialHandlingUnit != null ?
                new ObjectParameter("MaterialHandlingUnit", materialHandlingUnit) :
                new ObjectParameter("MaterialHandlingUnit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAlreadyExistingAsnPart_Result>("USP_GetAlreadyExistingAsnPart", aSNIdParameter, partNumberParameter, materialHandlingUnitParameter);
        }
    
        public virtual int USP_GetAlreadyExistingMHU(string partNumber, string supplierId, string shipmentNoticeId, ObjectParameter mHU)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var shipmentNoticeIdParameter = shipmentNoticeId != null ?
                new ObjectParameter("ShipmentNoticeId", shipmentNoticeId) :
                new ObjectParameter("ShipmentNoticeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAlreadyExistingMHU", partNumberParameter, supplierIdParameter, shipmentNoticeIdParameter, mHU);
        }
    
        public virtual int USP_GetAlreadyExistingUnloadListId(string carrierName, string trailerId, ObjectParameter id)
        {
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            var trailerIdParameter = trailerId != null ?
                new ObjectParameter("TrailerId", trailerId) :
                new ObjectParameter("TrailerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAlreadyExistingUnloadListId", carrierNameParameter, trailerIdParameter, id);
        }
    
        public virtual ObjectResult<USP_GetAsAreaGridQuantity_Result> USP_GetAsAreaGridQuantity(string partNumber, string costCenter, Nullable<bool> owning)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var owningParameter = owning.HasValue ?
                new ObjectParameter("Owning", owning) :
                new ObjectParameter("Owning", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAsAreaGridQuantity_Result>("USP_GetAsAreaGridQuantity", partNumberParameter, costCenterParameter, owningParameter);
        }
    
        public virtual int USP_GetAsnForAsnNums(string aSNNum)
        {
            var aSNNumParameter = aSNNum != null ?
                new ObjectParameter("ASNNum", aSNNum) :
                new ObjectParameter("ASNNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAsnForAsnNums", aSNNumParameter);
        }
    
        public virtual int USP_GetAsnForConsignmentNums(string consNum)
        {
            var consNumParameter = consNum != null ?
                new ObjectParameter("ConsNum", consNum) :
                new ObjectParameter("ConsNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAsnForConsignmentNums", consNumParameter);
        }
    
        public virtual int USP_GetAsnForPackageNums(string mainPackageNum, Nullable<int> aSNId)
        {
            var mainPackageNumParameter = mainPackageNum != null ?
                new ObjectParameter("MainPackageNum", mainPackageNum) :
                new ObjectParameter("MainPackageNum", typeof(string));
    
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAsnForPackageNums", mainPackageNumParameter, aSNIdParameter);
        }
    
        public virtual int USP_GetAsnForPartNums(string partNum)
        {
            var partNumParameter = partNum != null ?
                new ObjectParameter("PartNum", partNum) :
                new ObjectParameter("PartNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAsnForPartNums", partNumParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetAvailable_InventoryBalance(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetAvailable_InventoryBalance", partNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetAvailablePartBalance(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetAvailablePartBalance", partNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetConnectedPartsToKit_Result> USP_GetConnectedPartsToKit(string kitId, string languageCode)
        {
            var kitIdParameter = kitId != null ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetConnectedPartsToKit_Result>("USP_GetConnectedPartsToKit", kitIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<string> USP_GetDeepstowByZoneLocationUnblocked(Nullable<int> zoneNo, string locType, string dept)
        {
            var zoneNoParameter = zoneNo.HasValue ?
                new ObjectParameter("ZoneNo", zoneNo) :
                new ObjectParameter("ZoneNo", typeof(int));
    
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetDeepstowByZoneLocationUnblocked", zoneNoParameter, locTypeParameter, deptParameter);
        }
    
        public virtual ObjectResult<USP_GetDeliveryUnitPart_Result> USP_GetDeliveryUnitPart(string deliveryUnitId, string parentPartNumber, string subPartNo, string functionGroup, string subGroup, string languageCode)
        {
            var deliveryUnitIdParameter = deliveryUnitId != null ?
                new ObjectParameter("DeliveryUnitId", deliveryUnitId) :
                new ObjectParameter("DeliveryUnitId", typeof(string));
    
            var parentPartNumberParameter = parentPartNumber != null ?
                new ObjectParameter("ParentPartNumber", parentPartNumber) :
                new ObjectParameter("ParentPartNumber", typeof(string));
    
            var subPartNoParameter = subPartNo != null ?
                new ObjectParameter("SubPartNo", subPartNo) :
                new ObjectParameter("SubPartNo", typeof(string));
    
            var functionGroupParameter = functionGroup != null ?
                new ObjectParameter("FunctionGroup", functionGroup) :
                new ObjectParameter("FunctionGroup", typeof(string));
    
            var subGroupParameter = subGroup != null ?
                new ObjectParameter("SubGroup", subGroup) :
                new ObjectParameter("SubGroup", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDeliveryUnitPart_Result>("USP_GetDeliveryUnitPart", deliveryUnitIdParameter, parentPartNumberParameter, subPartNoParameter, functionGroupParameter, subGroupParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetDeliveryUnits_Result> USP_GetDeliveryUnits(string deliveryUnitId, string parentPartNumber, string subPartNo, Nullable<int> line, string station, string family, string languageCode)
        {
            var deliveryUnitIdParameter = deliveryUnitId != null ?
                new ObjectParameter("DeliveryUnitId", deliveryUnitId) :
                new ObjectParameter("DeliveryUnitId", typeof(string));
    
            var parentPartNumberParameter = parentPartNumber != null ?
                new ObjectParameter("ParentPartNumber", parentPartNumber) :
                new ObjectParameter("ParentPartNumber", typeof(string));
    
            var subPartNoParameter = subPartNo != null ?
                new ObjectParameter("SubPartNo", subPartNo) :
                new ObjectParameter("SubPartNo", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDeliveryUnits_Result>("USP_GetDeliveryUnits", deliveryUnitIdParameter, parentPartNumberParameter, subPartNoParameter, lineParameter, stationParameter, familyParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetDepartmentOnCost_Result> USP_GetDepartmentOnCost(string costCenter)
        {
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDepartmentOnCost_Result>("USP_GetDepartmentOnCost", costCenterParameter);
        }
    
        public virtual ObjectResult<USP_GetDepartmentWithDesc_Result> USP_GetDepartmentWithDesc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDepartmentWithDesc_Result>("USP_GetDepartmentWithDesc");
        }
    
        public virtual ObjectResult<string> USP_GetDistinctCostcenterInLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetDistinctCostcenterInLocation");
        }
    
        public virtual int USP_GetDuForShowKitOrderQueByKit(Nullable<int> status, string kitId, string deliveryUnit, Nullable<System.DateTime> startDateFrom, Nullable<System.DateTime> startDateTo, Nullable<int> line)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var kitIdParameter = kitId != null ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(string));
    
            var deliveryUnitParameter = deliveryUnit != null ?
                new ObjectParameter("DeliveryUnit", deliveryUnit) :
                new ObjectParameter("DeliveryUnit", typeof(string));
    
            var startDateFromParameter = startDateFrom.HasValue ?
                new ObjectParameter("StartDateFrom", startDateFrom) :
                new ObjectParameter("StartDateFrom", typeof(System.DateTime));
    
            var startDateToParameter = startDateTo.HasValue ?
                new ObjectParameter("StartDateTo", startDateTo) :
                new ObjectParameter("StartDateTo", typeof(System.DateTime));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetDuForShowKitOrderQueByKit", statusParameter, kitIdParameter, deliveryUnitParameter, startDateFromParameter, startDateToParameter, lineParameter);
        }
    
        public virtual ObjectResult<USP_GetEmballageTypPartExp_Result> USP_GetEmballageTypPartExp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetEmballageTypPartExp_Result>("USP_GetEmballageTypPartExp");
        }
    
        public virtual int USP_GetEventFieldDetails(string eventFieldId)
        {
            var eventFieldIdParameter = eventFieldId != null ?
                new ObjectParameter("EventFieldId", eventFieldId) :
                new ObjectParameter("EventFieldId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetEventFieldDetails", eventFieldIdParameter);
        }
    
        public virtual ObjectResult<USP_GetExistingPickingSequence_Result> USP_GetExistingPickingSequence(Nullable<int> locationGroupId)
        {
            var locationGroupIdParameter = locationGroupId.HasValue ?
                new ObjectParameter("LocationGroupId", locationGroupId) :
                new ObjectParameter("LocationGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetExistingPickingSequence_Result>("USP_GetExistingPickingSequence", locationGroupIdParameter);
        }
    
        public virtual ObjectResult<USP_GetExistingStorageMap_Result> USP_GetExistingStorageMap(string strLocationFrom, string strLocationTo)
        {
            var strLocationFromParameter = strLocationFrom != null ?
                new ObjectParameter("StrLocationFrom", strLocationFrom) :
                new ObjectParameter("StrLocationFrom", typeof(string));
    
            var strLocationToParameter = strLocationTo != null ?
                new ObjectParameter("StrLocationTo", strLocationTo) :
                new ObjectParameter("StrLocationTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetExistingStorageMap_Result>("USP_GetExistingStorageMap", strLocationFromParameter, strLocationToParameter);
        }
    
        public virtual int USP_GetExistingStorageMapToActivate(string storageName)
        {
            var storageNameParameter = storageName != null ?
                new ObjectParameter("StorageName", storageName) :
                new ObjectParameter("StorageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetExistingStorageMapToActivate", storageNameParameter);
        }
    
        public virtual int USP_GetFeedbackLocationForCurrentLocIsFeedbackLoc(string costCenter, string feedbackLocation, string languageCode)
        {
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var feedbackLocationParameter = feedbackLocation != null ?
                new ObjectParameter("FeedbackLocation", feedbackLocation) :
                new ObjectParameter("FeedbackLocation", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetFeedbackLocationForCurrentLocIsFeedbackLoc", costCenterParameter, feedbackLocationParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetFreeLocForDeepStow_Result> USP_GetFreeLocForDeepStow(string lASTPACKLOC, string partNo, string dept, string locType)
        {
            var lASTPACKLOCParameter = lASTPACKLOC != null ?
                new ObjectParameter("LASTPACKLOC", lASTPACKLOC) :
                new ObjectParameter("LASTPACKLOC", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFreeLocForDeepStow_Result>("USP_GetFreeLocForDeepStow", lASTPACKLOCParameter, partNoParameter, deptParameter, locTypeParameter);
        }
    
        public virtual ObjectResult<USP_GetFriStapelLoc_Result> USP_GetFriStapelLoc(string locType, string dept, Nullable<int> zoneNo, Nullable<int> lEVELPOS, Nullable<int> pACKPALLET, Nullable<int> mAXPALLET)
        {
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var zoneNoParameter = zoneNo.HasValue ?
                new ObjectParameter("ZoneNo", zoneNo) :
                new ObjectParameter("ZoneNo", typeof(int));
    
            var lEVELPOSParameter = lEVELPOS.HasValue ?
                new ObjectParameter("LEVELPOS", lEVELPOS) :
                new ObjectParameter("LEVELPOS", typeof(int));
    
            var pACKPALLETParameter = pACKPALLET.HasValue ?
                new ObjectParameter("PACKPALLET", pACKPALLET) :
                new ObjectParameter("PACKPALLET", typeof(int));
    
            var mAXPALLETParameter = mAXPALLET.HasValue ?
                new ObjectParameter("MAXPALLET", mAXPALLET) :
                new ObjectParameter("MAXPALLET", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFriStapelLoc_Result>("USP_GetFriStapelLoc", locTypeParameter, deptParameter, zoneNoParameter, lEVELPOSParameter, pACKPALLETParameter, mAXPALLETParameter);
        }
    
        public virtual int USP_GetIndividualHistoryFieldDetails(string partNumber, string dATEFROM, string dATETO, string department, string statusCodeDesc, string serialNumber, string eventTypeId, string supplier, string mainPackage, string fIFODateFrom, string fIFODateTo)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var dATEFROMParameter = dATEFROM != null ?
                new ObjectParameter("DATEFROM", dATEFROM) :
                new ObjectParameter("DATEFROM", typeof(string));
    
            var dATETOParameter = dATETO != null ?
                new ObjectParameter("DATETO", dATETO) :
                new ObjectParameter("DATETO", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var statusCodeDescParameter = statusCodeDesc != null ?
                new ObjectParameter("StatusCodeDesc", statusCodeDesc) :
                new ObjectParameter("StatusCodeDesc", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var eventTypeIdParameter = eventTypeId != null ?
                new ObjectParameter("EventTypeId", eventTypeId) :
                new ObjectParameter("EventTypeId", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var mainPackageParameter = mainPackage != null ?
                new ObjectParameter("MainPackage", mainPackage) :
                new ObjectParameter("MainPackage", typeof(string));
    
            var fIFODateFromParameter = fIFODateFrom != null ?
                new ObjectParameter("FIFODateFrom", fIFODateFrom) :
                new ObjectParameter("FIFODateFrom", typeof(string));
    
            var fIFODateToParameter = fIFODateTo != null ?
                new ObjectParameter("FIFODateTo", fIFODateTo) :
                new ObjectParameter("FIFODateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetIndividualHistoryFieldDetails", partNumberParameter, dATEFROMParameter, dATETOParameter, departmentParameter, statusCodeDescParameter, serialNumberParameter, eventTypeIdParameter, supplierParameter, mainPackageParameter, fIFODateFromParameter, fIFODateToParameter);
        }
    
        public virtual ObjectResult<USP_GetInventoryOverview_Result> USP_GetInventoryOverview(string partNumber, string costCenter, Nullable<bool> owning, ObjectParameter arrived, ObjectParameter available, ObjectParameter booked, ObjectParameter blocked, ObjectParameter aSN, ObjectParameter materialController, ObjectParameter materialHandlingCode, ObjectParameter materialHandlingLotSize)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var owningParameter = owning.HasValue ?
                new ObjectParameter("Owning", owning) :
                new ObjectParameter("Owning", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInventoryOverview_Result>("USP_GetInventoryOverview", partNumberParameter, costCenterParameter, owningParameter, arrived, available, booked, blocked, aSN, materialController, materialHandlingCode, materialHandlingLotSize);
        }
    
        public virtual ObjectResult<USP_GetLastPackDetailsByPartNoStatusCode_Result> USP_GetLastPackDetailsByPartNoStatusCode(string partNo, string statusCode, string dept, string mHU)
        {
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLastPackDetailsByPartNoStatusCode_Result>("USP_GetLastPackDetailsByPartNoStatusCode", partNoParameter, statusCodeParameter, deptParameter, mHUParameter);
        }
    
        public virtual ObjectResult<USP_GetLineStnOperationPart_Result> USP_GetLineStnOperationPart(string stationId, Nullable<int> line, string partNumber, string langCode)
        {
            var stationIdParameter = stationId != null ?
                new ObjectParameter("StationId", stationId) :
                new ObjectParameter("StationId", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLineStnOperationPart_Result>("USP_GetLineStnOperationPart", stationIdParameter, lineParameter, partNumberParameter, langCodeParameter);
        }
    
        public virtual int USP_GetLocationBlockingCodes(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetLocationBlockingCodes", languageParameter);
        }
    
        public virtual ObjectResult<USP_GetLocationBlockings_Result> USP_GetLocationBlockings(string departmentId, string locationId, Nullable<int> blockType, string language)
        {
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var blockTypeParameter = blockType.HasValue ?
                new ObjectParameter("BlockType", blockType) :
                new ObjectParameter("BlockType", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationBlockings_Result>("USP_GetLocationBlockings", departmentIdParameter, locationIdParameter, blockTypeParameter, languageParameter);
        }
    
        public virtual ObjectResult<USP_GetLocationDetailsForPackage_Result> USP_GetLocationDetailsForPackage(string packageId, string supplierId, string department)
        {
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationDetailsForPackage_Result>("USP_GetLocationDetailsForPackage", packageIdParameter, supplierIdParameter, departmentParameter);
        }
    
        public virtual ObjectResult<USP_GetLocationDtl_Result> USP_GetLocationDtl(string locationId, string owningDepartment, string storageName)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var owningDepartmentParameter = owningDepartment != null ?
                new ObjectParameter("OwningDepartment", owningDepartment) :
                new ObjectParameter("OwningDepartment", typeof(string));
    
            var storageNameParameter = storageName != null ?
                new ObjectParameter("StorageName", storageName) :
                new ObjectParameter("StorageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationDtl_Result>("USP_GetLocationDtl", locationIdParameter, owningDepartmentParameter, storageNameParameter);
        }
    
        public virtual ObjectResult<USP_GetLocationDtlByKey_Result> USP_GetLocationDtlByKey(string locationId)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationDtlByKey_Result>("USP_GetLocationDtlByKey", locationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetLocationGroup_Result> USP_GetLocationGroup(string locationGroup)
        {
            var locationGroupParameter = locationGroup != null ?
                new ObjectParameter("locationGroup", locationGroup) :
                new ObjectParameter("locationGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationGroup_Result>("USP_GetLocationGroup", locationGroupParameter);
        }
    
        public virtual int USP_GetLocationGroupBlockingCodes(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetLocationGroupBlockingCodes", languageParameter);
        }
    
        public virtual ObjectResult<USP_GetLocationGroupBlockings_Result> USP_GetLocationGroupBlockings(string locationGroupName, Nullable<int> blockType, string language)
        {
            var locationGroupNameParameter = locationGroupName != null ?
                new ObjectParameter("LocationGroupName", locationGroupName) :
                new ObjectParameter("LocationGroupName", typeof(string));
    
            var blockTypeParameter = blockType.HasValue ?
                new ObjectParameter("BlockType", blockType) :
                new ObjectParameter("BlockType", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationGroupBlockings_Result>("USP_GetLocationGroupBlockings", locationGroupNameParameter, blockTypeParameter, languageParameter);
        }
    
        public virtual ObjectResult<string> USP_GetLocationsForUpdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetLocationsForUpdate");
        }
    
        public virtual ObjectResult<USP_GetLocationTypeWithDescription_Result> USP_GetLocationTypeWithDescription(string languageCode)
        {
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationTypeWithDescription_Result>("USP_GetLocationTypeWithDescription", languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetLotPackage_Result> USP_GetLotPackage(string supplierId, Nullable<int> aSNId, string status, string partNumber)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLotPackage_Result>("USP_GetLotPackage", supplierIdParameter, aSNIdParameter, statusParameter, partNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackageForAPackageNo_Result> USP_GetMainPackageForAPackageNo(string packageNumber)
        {
            var packageNumberParameter = packageNumber != null ?
                new ObjectParameter("PackageNumber", packageNumber) :
                new ObjectParameter("PackageNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackageForAPackageNo_Result>("USP_GetMainPackageForAPackageNo", packageNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackageLocation_Result> USP_GetMainPackageLocation(string supplierId, string mainPackageId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackageLocation_Result>("USP_GetMainPackageLocation", supplierIdParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackagesInventory_Result> USP_GetMainPackagesInventory(string partNumber, string costCenter, Nullable<bool> owning, string mainCostCenter)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var owningParameter = owning.HasValue ?
                new ObjectParameter("Owning", owning) :
                new ObjectParameter("Owning", typeof(bool));
    
            var mainCostCenterParameter = mainCostCenter != null ?
                new ObjectParameter("MainCostCenter", mainCostCenter) :
                new ObjectParameter("MainCostCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackagesInventory_Result>("USP_GetMainPackagesInventory", partNumberParameter, costCenterParameter, owningParameter, mainCostCenterParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackagesOnPackageId_Result> USP_GetMainPackagesOnPackageId(string mainPackageId, string status)
        {
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackagesOnPackageId_Result>("USP_GetMainPackagesOnPackageId", mainPackageIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackagesOnPartQty_Result> USP_GetMainPackagesOnPartQty(string partNumber, Nullable<int> packageQuantity, string status)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var packageQuantityParameter = packageQuantity.HasValue ?
                new ObjectParameter("PackageQuantity", packageQuantity) :
                new ObjectParameter("PackageQuantity", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackagesOnPartQty_Result>("USP_GetMainPackagesOnPartQty", partNumberParameter, packageQuantityParameter, statusParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackagesOnSupplierDespatch_Result> USP_GetMainPackagesOnSupplierDespatch(string despatchNoteNo, string supplierId, string partNumber, Nullable<int> packageQuantity, string status)
        {
            var despatchNoteNoParameter = despatchNoteNo != null ?
                new ObjectParameter("DespatchNoteNo", despatchNoteNo) :
                new ObjectParameter("DespatchNoteNo", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var packageQuantityParameter = packageQuantity.HasValue ?
                new ObjectParameter("PackageQuantity", packageQuantity) :
                new ObjectParameter("PackageQuantity", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackagesOnSupplierDespatch_Result>("USP_GetMainPackagesOnSupplierDespatch", despatchNoteNoParameter, supplierIdParameter, partNumberParameter, packageQuantityParameter, statusParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackagesOnYardArea_Result> USP_GetMainPackagesOnYardArea(string packageLocationId, string supplierId, string mainPackageId)
        {
            var packageLocationIdParameter = packageLocationId != null ?
                new ObjectParameter("PackageLocationId", packageLocationId) :
                new ObjectParameter("PackageLocationId", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackagesOnYardArea_Result>("USP_GetMainPackagesOnYardArea", packageLocationIdParameter, supplierIdParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackageType_Result> USP_GetMainPackageType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackageType_Result>("USP_GetMainPackageType");
        }
    
        public virtual ObjectResult<USP_GetMainPackageWithPalletFramesAndDesc_Result> USP_GetMainPackageWithPalletFramesAndDesc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackageWithPalletFramesAndDesc_Result>("USP_GetMainPackageWithPalletFramesAndDesc");
        }
    
        public virtual ObjectResult<USP_GetMainPackByPart_Result> USP_GetMainPackByPart(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackByPart_Result>("USP_GetMainPackByPart", partNumberParameter);
        }
    
        public virtual int USP_GetMainPackForShoPackage(string partNumber, string supplierId, string dept, string mHU, string docNo, string costCenter, Nullable<bool> owner, string mainPackage, string subPackage, string batchNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var ownerParameter = owner.HasValue ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(bool));
    
            var mainPackageParameter = mainPackage != null ?
                new ObjectParameter("MainPackage", mainPackage) :
                new ObjectParameter("MainPackage", typeof(string));
    
            var subPackageParameter = subPackage != null ?
                new ObjectParameter("SubPackage", subPackage) :
                new ObjectParameter("SubPackage", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetMainPackForShoPackage", partNumberParameter, supplierIdParameter, deptParameter, mHUParameter, docNoParameter, costCenterParameter, ownerParameter, mainPackageParameter, subPackageParameter, batchNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetMainPackInStorage_Result> USP_GetMainPackInStorage(string dept, string partNumber, Nullable<int> option, string currentLanguage)
        {
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            var currentLanguageParameter = currentLanguage != null ?
                new ObjectParameter("CurrentLanguage", currentLanguage) :
                new ObjectParameter("CurrentLanguage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMainPackInStorage_Result>("USP_GetMainPackInStorage", deptParameter, partNumberParameter, optionParameter, currentLanguageParameter);
        }
    
        public virtual ObjectResult<USP_GetMasterGroupsForLocation_Result> USP_GetMasterGroupsForLocation(string locationId, string languageCode)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMasterGroupsForLocation_Result>("USP_GetMasterGroupsForLocation", locationIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<string> USP_GetMasterTypeDescriptionByLangcode(string masterTypeId, string languageCode)
        {
            var masterTypeIdParameter = masterTypeId != null ?
                new ObjectParameter("MasterTypeId", masterTypeId) :
                new ObjectParameter("MasterTypeId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetMasterTypeDescriptionByLangcode", masterTypeIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetMessagePackageList_Result> USP_GetMessagePackageList(string partNumber, string packageId, string mHU, string statusCode, string supplier, string sampleCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var sampleCodeParameter = sampleCode != null ?
                new ObjectParameter("SampleCode", sampleCode) :
                new ObjectParameter("SampleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMessagePackageList_Result>("USP_GetMessagePackageList", partNumberParameter, packageIdParameter, mHUParameter, statusCodeParameter, supplierParameter, sampleCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetMtrlCodeDesc_Result> USP_GetMtrlCodeDesc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetMtrlCodeDesc_Result>("USP_GetMtrlCodeDesc");
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetNoOfPackageInLocation(string pLocation)
        {
            var pLocationParameter = pLocation != null ?
                new ObjectParameter("pLocation", pLocation) :
                new ObjectParameter("pLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetNoOfPackageInLocation", pLocationParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetNoOfPackageInRejArea(string pLocation)
        {
            var pLocationParameter = pLocation != null ?
                new ObjectParameter("pLocation", pLocation) :
                new ObjectParameter("pLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetNoOfPackageInRejArea", pLocationParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetNoOfPackageInTransitToLocation(string pLocation)
        {
            var pLocationParameter = pLocation != null ?
                new ObjectParameter("pLocation", pLocation) :
                new ObjectParameter("pLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetNoOfPackageInTransitToLocation", pLocationParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetNoOfPackageInTransitToRejArea(string pLocation)
        {
            var pLocationParameter = pLocation != null ?
                new ObjectParameter("pLocation", pLocation) :
                new ObjectParameter("pLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetNoOfPackageInTransitToRejArea", pLocationParameter);
        }
    
        public virtual ObjectResult<USP_GetOriginalAsnPackage_Result> USP_GetOriginalAsnPackage(string packageId, Nullable<int> aSNId)
        {
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetOriginalAsnPackage_Result>("USP_GetOriginalAsnPackage", packageIdParameter, aSNIdParameter);
        }
    
        public virtual ObjectResult<USP_GetPackageCodeByKey_Result> USP_GetPackageCodeByKey(string supplierId, string mainPackageId, Nullable<int> blockingCode)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var blockingCodeParameter = blockingCode.HasValue ?
                new ObjectParameter("BlockingCode", blockingCode) :
                new ObjectParameter("BlockingCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackageCodeByKey_Result>("USP_GetPackageCodeByKey", supplierIdParameter, mainPackageIdParameter, blockingCodeParameter);
        }
    
        public virtual int USP_GetPackageCodeByLangcode(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPackageCodeByLangcode", languageParameter);
        }
    
        public virtual int USP_GetPackageCountForDelete(string mainPackageId, Nullable<int> aSNId, ObjectParameter actualCount, ObjectParameter filteredCount)
        {
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPackageCountForDelete", mainPackageIdParameter, aSNIdParameter, actualCount, filteredCount);
        }
    
        public virtual ObjectResult<USP_GetPackageDetails_Result> USP_GetPackageDetails(string pShipmentNoticeId, string pSupplierId, string pMainPackageId, string pPartNumber, Nullable<int> pPalletTypeId, string pconstLOTStatus)
        {
            var pShipmentNoticeIdParameter = pShipmentNoticeId != null ?
                new ObjectParameter("pShipmentNoticeId", pShipmentNoticeId) :
                new ObjectParameter("pShipmentNoticeId", typeof(string));
    
            var pSupplierIdParameter = pSupplierId != null ?
                new ObjectParameter("pSupplierId", pSupplierId) :
                new ObjectParameter("pSupplierId", typeof(string));
    
            var pMainPackageIdParameter = pMainPackageId != null ?
                new ObjectParameter("pMainPackageId", pMainPackageId) :
                new ObjectParameter("pMainPackageId", typeof(string));
    
            var pPartNumberParameter = pPartNumber != null ?
                new ObjectParameter("pPartNumber", pPartNumber) :
                new ObjectParameter("pPartNumber", typeof(string));
    
            var pPalletTypeIdParameter = pPalletTypeId.HasValue ?
                new ObjectParameter("pPalletTypeId", pPalletTypeId) :
                new ObjectParameter("pPalletTypeId", typeof(int));
    
            var pconstLOTStatusParameter = pconstLOTStatus != null ?
                new ObjectParameter("pconstLOTStatus", pconstLOTStatus) :
                new ObjectParameter("pconstLOTStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackageDetails_Result>("USP_GetPackageDetails", pShipmentNoticeIdParameter, pSupplierIdParameter, pMainPackageIdParameter, pPartNumberParameter, pPalletTypeIdParameter, pconstLOTStatusParameter);
        }
    
        public virtual ObjectResult<USP_GetPackageEventsHistory_Result> USP_GetPackageEventsHistory(string mainPackage, string supplier)
        {
            var mainPackageParameter = mainPackage != null ?
                new ObjectParameter("MainPackage", mainPackage) :
                new ObjectParameter("MainPackage", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackageEventsHistory_Result>("USP_GetPackageEventsHistory", mainPackageParameter, supplierParameter);
        }
    
        public virtual ObjectResult<USP_GetPackageInfoForICSResponse_Result> USP_GetPackageInfoForICSResponse(string supplierId, string partNumber, string documentNumber)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackageInfoForICSResponse_Result>("USP_GetPackageInfoForICSResponse", supplierIdParameter, partNumberParameter, documentNumberParameter);
        }
    
        public virtual int USP_GetPackageInWarehouse(string department, string receivingDepartment, Nullable<int> noOfMainPackage, ObjectParameter minLocationWarehouse, ObjectParameter pkgInWarehouse, ObjectParameter availableLocation)
        {
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var receivingDepartmentParameter = receivingDepartment != null ?
                new ObjectParameter("ReceivingDepartment", receivingDepartment) :
                new ObjectParameter("ReceivingDepartment", typeof(string));
    
            var noOfMainPackageParameter = noOfMainPackage.HasValue ?
                new ObjectParameter("NoOfMainPackage", noOfMainPackage) :
                new ObjectParameter("NoOfMainPackage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPackageInWarehouse", departmentParameter, receivingDepartmentParameter, noOfMainPackageParameter, minLocationWarehouse, pkgInWarehouse, availableLocation);
        }
    
        public virtual ObjectResult<USP_GetPackages_Inown_AssemblyStorage_Result> USP_GetPackages_Inown_AssemblyStorage(string partNumber, string departmentId, Nullable<int> partOrderTypeId)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var partOrderTypeIdParameter = partOrderTypeId.HasValue ?
                new ObjectParameter("PartOrderTypeId", partOrderTypeId) :
                new ObjectParameter("PartOrderTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackages_Inown_AssemblyStorage_Result>("USP_GetPackages_Inown_AssemblyStorage", partNumberParameter, departmentIdParameter, partOrderTypeIdParameter);
        }
    
        public virtual ObjectResult<USP_GetPackageStorePack_Result> USP_GetPackageStorePack(string mainPackageSupplierId, string mainPackageId)
        {
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackageStorePack_Result>("USP_GetPackageStorePack", mainPackageSupplierIdParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_GetPackOrderMaterialBooking_Result> USP_GetPackOrderMaterialBooking(string partNumber, string department)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackOrderMaterialBooking_Result>("USP_GetPackOrderMaterialBooking", partNumberParameter, departmentParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetPalletTypeId(string packageTypeId, Nullable<int> palletFrames)
        {
            var packageTypeIdParameter = packageTypeId != null ?
                new ObjectParameter("PackageTypeId", packageTypeId) :
                new ObjectParameter("PackageTypeId", typeof(string));
    
            var palletFramesParameter = palletFrames.HasValue ?
                new ObjectParameter("PalletFrames", palletFrames) :
                new ObjectParameter("PalletFrames", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetPalletTypeId", packageTypeIdParameter, palletFramesParameter);
        }
    
        public virtual ObjectResult<USP_GetPartBySupplierMainPackNo_Result> USP_GetPartBySupplierMainPackNo(string supplierId, string mainPackageId, string costCenter)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPartBySupplierMainPackNo_Result>("USP_GetPartBySupplierMainPackNo", supplierIdParameter, mainPackageIdParameter, costCenterParameter);
        }
    
        public virtual ObjectResult<USP_GetPartBySupplierMainPackNoCostCenter_Result> USP_GetPartBySupplierMainPackNoCostCenter(string supplierId, string mainPackageId, string dept)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPartBySupplierMainPackNoCostCenter_Result>("USP_GetPartBySupplierMainPackNoCostCenter", supplierIdParameter, mainPackageIdParameter, deptParameter);
        }
    
        public virtual ObjectResult<USP_GetPartDeliveryLocationDetails_Result> USP_GetPartDeliveryLocationDetails(Nullable<int> line, string stationId, string partNumber, string deliveryLocation, Nullable<bool> isEmptyDeliveryLoc)
        {
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            var stationIdParameter = stationId != null ?
                new ObjectParameter("StationId", stationId) :
                new ObjectParameter("StationId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var isEmptyDeliveryLocParameter = isEmptyDeliveryLoc.HasValue ?
                new ObjectParameter("IsEmptyDeliveryLoc", isEmptyDeliveryLoc) :
                new ObjectParameter("IsEmptyDeliveryLoc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPartDeliveryLocationDetails_Result>("USP_GetPartDeliveryLocationDetails", lineParameter, stationIdParameter, partNumberParameter, deliveryLocationParameter, isEmptyDeliveryLocParameter);
        }
    
        public virtual ObjectResult<USP_GetPartDescriptionByLangcode_Result> USP_GetPartDescriptionByLangcode(string partNumber, string languageCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPartDescriptionByLangcode_Result>("USP_GetPartDescriptionByLangcode", partNumberParameter, languageCodeParameter);
        }
    
        public virtual int USP_GetPartHistoryDetails(string partNumber, string dATEFROM, string dATETO)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var dATEFROMParameter = dATEFROM != null ?
                new ObjectParameter("DATEFROM", dATEFROM) :
                new ObjectParameter("DATEFROM", typeof(string));
    
            var dATETOParameter = dATETO != null ?
                new ObjectParameter("DATETO", dATETO) :
                new ObjectParameter("DATETO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPartHistoryDetails", partNumberParameter, dATEFROMParameter, dATETOParameter);
        }
    
        public virtual ObjectResult<USP_GetPartOrderForPickMaterial_Result> USP_GetPartOrderForPickMaterial(string receivingDepartment, string customerReferenceNumber, string partNumber, string department, string packagingCode, string langCode)
        {
            var receivingDepartmentParameter = receivingDepartment != null ?
                new ObjectParameter("ReceivingDepartment", receivingDepartment) :
                new ObjectParameter("ReceivingDepartment", typeof(string));
    
            var customerReferenceNumberParameter = customerReferenceNumber != null ?
                new ObjectParameter("CustomerReferenceNumber", customerReferenceNumber) :
                new ObjectParameter("CustomerReferenceNumber", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var packagingCodeParameter = packagingCode != null ?
                new ObjectParameter("PackagingCode", packagingCode) :
                new ObjectParameter("PackagingCode", typeof(string));
    
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPartOrderForPickMaterial_Result>("USP_GetPartOrderForPickMaterial", receivingDepartmentParameter, customerReferenceNumberParameter, partNumberParameter, departmentParameter, packagingCodeParameter, langCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetPartOrderTypeWithDescription_Result> USP_GetPartOrderTypeWithDescription(string languageCode)
        {
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPartOrderTypeWithDescription_Result>("USP_GetPartOrderTypeWithDescription", languageCodeParameter);
        }
    
        public virtual int USP_GetPartOrderValid(string partNumber, string partOrderTypeIdIn, string partOrderTypeIdNotIn)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partOrderTypeIdInParameter = partOrderTypeIdIn != null ?
                new ObjectParameter("PartOrderTypeIdIn", partOrderTypeIdIn) :
                new ObjectParameter("PartOrderTypeIdIn", typeof(string));
    
            var partOrderTypeIdNotInParameter = partOrderTypeIdNotIn != null ?
                new ObjectParameter("PartOrderTypeIdNotIn", partOrderTypeIdNotIn) :
                new ObjectParameter("PartOrderTypeIdNotIn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPartOrderValid", partNumberParameter, partOrderTypeIdInParameter, partOrderTypeIdNotInParameter);
        }
    
        public virtual int USP_GetPossibleOrdersForPushReplenishment(string fromDepartment, string toDepartment)
        {
            var fromDepartmentParameter = fromDepartment != null ?
                new ObjectParameter("FromDepartment", fromDepartment) :
                new ObjectParameter("FromDepartment", typeof(string));
    
            var toDepartmentParameter = toDepartment != null ?
                new ObjectParameter("ToDepartment", toDepartment) :
                new ObjectParameter("ToDepartment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPossibleOrdersForPushReplenishment", fromDepartmentParameter, toDepartmentParameter);
        }
    
        public virtual int USP_GetPrinters(string userId, string locationId, ObjectParameter printerPrimary, ObjectParameter printerSecondary, ObjectParameter printerTertiary)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPrinters", userIdParameter, locationIdParameter, printerPrimary, printerSecondary, printerTertiary);
        }
    
        public virtual ObjectResult<USP_GetReceivingExceptions_Result> USP_GetReceivingExceptions(string supplierId, string despatchNote, string partNo, string mainPackageId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var despatchNoteParameter = despatchNote != null ?
                new ObjectParameter("DespatchNote", despatchNote) :
                new ObjectParameter("DespatchNote", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetReceivingExceptions_Result>("USP_GetReceivingExceptions", supplierIdParameter, despatchNoteParameter, partNoParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_GetSampleCodeGridQuantity_Result> USP_GetSampleCodeGridQuantity(string partNumber, string costCenter, Nullable<bool> owning)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var owningParameter = owning.HasValue ?
                new ObjectParameter("Owning", owning) :
                new ObjectParameter("Owning", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSampleCodeGridQuantity_Result>("USP_GetSampleCodeGridQuantity", partNumberParameter, costCenterParameter, owningParameter);
        }
    
        public virtual int USP_GetShipmentInfoDetails(Nullable<int> flightExpressId, string supplierId, string shipmentNoticeId, string carrierName, string partNumber, Nullable<int> receiveStatus, string trailerId)
        {
            var flightExpressIdParameter = flightExpressId.HasValue ?
                new ObjectParameter("FlightExpressId", flightExpressId) :
                new ObjectParameter("FlightExpressId", typeof(int));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var shipmentNoticeIdParameter = shipmentNoticeId != null ?
                new ObjectParameter("ShipmentNoticeId", shipmentNoticeId) :
                new ObjectParameter("ShipmentNoticeId", typeof(string));
    
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var receiveStatusParameter = receiveStatus.HasValue ?
                new ObjectParameter("ReceiveStatus", receiveStatus) :
                new ObjectParameter("ReceiveStatus", typeof(int));
    
            var trailerIdParameter = trailerId != null ?
                new ObjectParameter("TrailerId", trailerId) :
                new ObjectParameter("TrailerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetShipmentInfoDetails", flightExpressIdParameter, supplierIdParameter, shipmentNoticeIdParameter, carrierNameParameter, partNumberParameter, receiveStatusParameter, trailerIdParameter);
        }
    
        public virtual ObjectResult<USP_GetStationKitDeliveryLocationDetails_Result> USP_GetStationKitDeliveryLocationDetails(Nullable<int> line, string station, string kitId, string deliveryLocation, string pickingGroup)
        {
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(int));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var kitIdParameter = kitId != null ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var pickingGroupParameter = pickingGroup != null ?
                new ObjectParameter("PickingGroup", pickingGroup) :
                new ObjectParameter("PickingGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetStationKitDeliveryLocationDetails_Result>("USP_GetStationKitDeliveryLocationDetails", lineParameter, stationParameter, kitIdParameter, deliveryLocationParameter, pickingGroupParameter);
        }
    
        public virtual ObjectResult<USP_GetStatusCodeOfSubpackage_Result> USP_GetStatusCodeOfSubpackage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetStatusCodeOfSubpackage_Result>("USP_GetStatusCodeOfSubpackage");
        }
    
        public virtual ObjectResult<USP_GetStorageAllowed_Result> USP_GetStorageAllowed(string department, string receivingCostCenter)
        {
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var receivingCostCenterParameter = receivingCostCenter != null ?
                new ObjectParameter("ReceivingCostCenter", receivingCostCenter) :
                new ObjectParameter("ReceivingCostCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetStorageAllowed_Result>("USP_GetStorageAllowed", departmentParameter, receivingCostCenterParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageBlockingCode_Result> USP_GetSubPackageBlockingCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageBlockingCode_Result>("USP_GetSubPackageBlockingCode");
        }
    
        public virtual int USP_GetSubPackageBookingForMasterGroup(string packageBookingLocation)
        {
            var packageBookingLocationParameter = packageBookingLocation != null ?
                new ObjectParameter("PackageBookingLocation", packageBookingLocation) :
                new ObjectParameter("PackageBookingLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetSubPackageBookingForMasterGroup", packageBookingLocationParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageBookingForPartnumber_Result> USP_GetSubPackageBookingForPartnumber(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageBookingForPartnumber_Result>("USP_GetSubPackageBookingForPartnumber", partNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageBookingForPickingGroup_Result> USP_GetSubPackageBookingForPickingGroup(string pickingGroupId)
        {
            var pickingGroupIdParameter = pickingGroupId != null ?
                new ObjectParameter("PickingGroupId", pickingGroupId) :
                new ObjectParameter("PickingGroupId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageBookingForPickingGroup_Result>("USP_GetSubPackageBookingForPickingGroup", pickingGroupIdParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageForMainPackageId_Result> USP_GetSubPackageForMainPackageId(string packageNumber)
        {
            var packageNumberParameter = packageNumber != null ?
                new ObjectParameter("PackageNumber", packageNumber) :
                new ObjectParameter("PackageNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageForMainPackageId_Result>("USP_GetSubPackageForMainPackageId", packageNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageList_Result> USP_GetSubPackageList(string mainPackageId, string supplierId)
        {
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageList_Result>("USP_GetSubPackageList", mainPackageIdParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageMessageByParam_Result> USP_GetSubPackageMessageByParam(string pACKAGESUPPLIERId, string packageId)
        {
            var pACKAGESUPPLIERIdParameter = pACKAGESUPPLIERId != null ?
                new ObjectParameter("PACKAGESUPPLIERId", pACKAGESUPPLIERId) :
                new ObjectParameter("PACKAGESUPPLIERId", typeof(string));
    
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageMessageByParam_Result>("USP_GetSubPackageMessageByParam", pACKAGESUPPLIERIdParameter, packageIdParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackagesByPickupLoc_Result> USP_GetSubPackagesByPickupLoc(string currentLocation, string department, string langCode)
        {
            var currentLocationParameter = currentLocation != null ?
                new ObjectParameter("CurrentLocation", currentLocation) :
                new ObjectParameter("CurrentLocation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackagesByPickupLoc_Result>("USP_GetSubPackagesByPickupLoc", currentLocationParameter, departmentParameter, langCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackagesInventory_Result> USP_GetSubPackagesInventory(string partNumber, string costCenter, string mainPackageId, string supplierId, Nullable<bool> owning, string mainCostCenter)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var owningParameter = owning.HasValue ?
                new ObjectParameter("Owning", owning) :
                new ObjectParameter("Owning", typeof(bool));
    
            var mainCostCenterParameter = mainCostCenter != null ?
                new ObjectParameter("MainCostCenter", mainCostCenter) :
                new ObjectParameter("MainCostCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackagesInventory_Result>("USP_GetSubPackagesInventory", partNumberParameter, costCenterParameter, mainPackageIdParameter, supplierIdParameter, owningParameter, mainCostCenterParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackagesOnYardarea_Result> USP_GetSubPackagesOnYardarea(string supplierId, string mainPackageId, string currentLanguage)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var currentLanguageParameter = currentLanguage != null ?
                new ObjectParameter("CurrentLanguage", currentLanguage) :
                new ObjectParameter("CurrentLanguage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackagesOnYardarea_Result>("USP_GetSubPackagesOnYardarea", supplierIdParameter, mainPackageIdParameter, currentLanguageParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageStatusCode_Result> USP_GetSubPackageStatusCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageStatusCode_Result>("USP_GetSubPackageStatusCode");
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GetSubPackageStatusCodeByPartNoPackageSupplier(string packageId, string supplierId, string partNo, string subPackageId)
        {
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GetSubPackageStatusCodeByPartNoPackageSupplier", packageIdParameter, supplierIdParameter, partNoParameter, subPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageToMaterialWithdrawal_Result> USP_GetSubPackageToMaterialWithdrawal(string mainPackageSupplierId, string mainPackageId, string subPackageSupplierId, string subPackageId, string department, string partNumber, string languageCode)
        {
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var subPackageSupplierIdParameter = subPackageSupplierId != null ?
                new ObjectParameter("SubPackageSupplierId", subPackageSupplierId) :
                new ObjectParameter("SubPackageSupplierId", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageToMaterialWithdrawal_Result>("USP_GetSubPackageToMaterialWithdrawal", mainPackageSupplierIdParameter, mainPackageIdParameter, subPackageSupplierIdParameter, subPackageIdParameter, departmentParameter, partNumberParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackageToRegisterPackageAdjustment_Result> USP_GetSubPackageToRegisterPackageAdjustment(string mainPackageSupplierId, string mainPackageId, string subPackageSupplierId, string subPackageId, string partNumber, string langCode, string blockCode, string location, string mHA)
        {
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var subPackageSupplierIdParameter = subPackageSupplierId != null ?
                new ObjectParameter("SubPackageSupplierId", subPackageSupplierId) :
                new ObjectParameter("SubPackageSupplierId", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var langCodeParameter = langCode != null ?
                new ObjectParameter("LangCode", langCode) :
                new ObjectParameter("LangCode", typeof(string));
    
            var blockCodeParameter = blockCode != null ?
                new ObjectParameter("BlockCode", blockCode) :
                new ObjectParameter("BlockCode", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var mHAParameter = mHA != null ?
                new ObjectParameter("MHA", mHA) :
                new ObjectParameter("MHA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackageToRegisterPackageAdjustment_Result>("USP_GetSubPackageToRegisterPackageAdjustment", mainPackageSupplierIdParameter, mainPackageIdParameter, subPackageSupplierIdParameter, subPackageIdParameter, partNumberParameter, langCodeParameter, blockCodeParameter, locationParameter, mHAParameter);
        }
    
        public virtual int USP_GetSubPackBookingsForMaterialCheck(Nullable<int> locationPackageHandling, string storageTypeId, Nullable<int> partOrderTypeId, Nullable<bool> bCheckBookedTime)
        {
            var locationPackageHandlingParameter = locationPackageHandling.HasValue ?
                new ObjectParameter("LocationPackageHandling", locationPackageHandling) :
                new ObjectParameter("LocationPackageHandling", typeof(int));
    
            var storageTypeIdParameter = storageTypeId != null ?
                new ObjectParameter("StorageTypeId", storageTypeId) :
                new ObjectParameter("StorageTypeId", typeof(string));
    
            var partOrderTypeIdParameter = partOrderTypeId.HasValue ?
                new ObjectParameter("PartOrderTypeId", partOrderTypeId) :
                new ObjectParameter("PartOrderTypeId", typeof(int));
    
            var bCheckBookedTimeParameter = bCheckBookedTime.HasValue ?
                new ObjectParameter("bCheckBookedTime", bCheckBookedTime) :
                new ObjectParameter("bCheckBookedTime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetSubPackBookingsForMaterialCheck", locationPackageHandlingParameter, storageTypeIdParameter, partOrderTypeIdParameter, bCheckBookedTimeParameter);
        }
    
        public virtual ObjectResult<USP_GetSubPackingBlockingCodeByLang_Result> USP_GetSubPackingBlockingCodeByLang(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSubPackingBlockingCodeByLang_Result>("USP_GetSubPackingBlockingCodeByLang", languageParameter);
        }
    
        public virtual ObjectResult<USP_GetSuppliersForAPart_Result> USP_GetSuppliersForAPart(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSuppliersForAPart_Result>("USP_GetSuppliersForAPart", partNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetUnbookedPackages_Result> USP_GetUnbookedPackages(string partNumber, string storageTypeId, string factoryCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var storageTypeIdParameter = storageTypeId != null ?
                new ObjectParameter("StorageTypeId", storageTypeId) :
                new ObjectParameter("StorageTypeId", typeof(string));
    
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUnbookedPackages_Result>("USP_GetUnbookedPackages", partNumberParameter, storageTypeIdParameter, factoryCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetUnbookedPackages_WithSerialNumber_Result> USP_GetUnbookedPackages_WithSerialNumber(string partNumber, string serialNumber, string storageTypeId, string factoryCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var storageTypeIdParameter = storageTypeId != null ?
                new ObjectParameter("StorageTypeId", storageTypeId) :
                new ObjectParameter("StorageTypeId", typeof(string));
    
            var factoryCodeParameter = factoryCode != null ?
                new ObjectParameter("FactoryCode", factoryCode) :
                new ObjectParameter("FactoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUnbookedPackages_WithSerialNumber_Result>("USP_GetUnbookedPackages_WithSerialNumber", partNumberParameter, serialNumberParameter, storageTypeIdParameter, factoryCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetUnfilledInspectionRequest_Result> USP_GetUnfilledInspectionRequest(Nullable<int> aSNId, string partNumber)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUnfilledInspectionRequest_Result>("USP_GetUnfilledInspectionRequest", aSNIdParameter, partNumberParameter);
        }
    
        public virtual ObjectResult<USP_GetUnverifiedGoods_Result> USP_GetUnverifiedGoods(string supplierId, string despatchNote, string partNo, string mainPackageId, string languageCode)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var despatchNoteParameter = despatchNote != null ?
                new ObjectParameter("DespatchNote", despatchNote) :
                new ObjectParameter("DespatchNote", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUnverifiedGoods_Result>("USP_GetUnverifiedGoods", supplierIdParameter, despatchNoteParameter, partNoParameter, mainPackageIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetUsecase_Result> USP_GetUsecase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetUsecase_Result>("USP_GetUsecase");
        }
    
        public virtual ObjectResult<USP_GetViewPackageWithBlockCodeByParam_Result> USP_GetViewPackageWithBlockCodeByParam(string subPackageSupplierId, string subPackageId, string partNo, string mainPackageId, string mainPackageSupplierId, string mHU, string statusCode, string sampleCode, string blockCode)
        {
            var subPackageSupplierIdParameter = subPackageSupplierId != null ?
                new ObjectParameter("SubPackageSupplierId", subPackageSupplierId) :
                new ObjectParameter("SubPackageSupplierId", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            var sampleCodeParameter = sampleCode != null ?
                new ObjectParameter("SampleCode", sampleCode) :
                new ObjectParameter("SampleCode", typeof(string));
    
            var blockCodeParameter = blockCode != null ?
                new ObjectParameter("BlockCode", blockCode) :
                new ObjectParameter("BlockCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetViewPackageWithBlockCodeByParam_Result>("USP_GetViewPackageWithBlockCodeByParam", subPackageSupplierIdParameter, subPackageIdParameter, partNoParameter, mainPackageIdParameter, mainPackageSupplierIdParameter, mHUParameter, statusCodeParameter, sampleCodeParameter, blockCodeParameter);
        }
    
        public virtual ObjectResult<USP_GetViewPackageWithStatusCodeByParam_Result> USP_GetViewPackageWithStatusCodeByParam(string partNumber, string subPackageSupplier, string subPackageId, string mainPackageSupplier, string mainPackageId, string statusCodes, string mHU, string sampleCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var subPackageSupplierParameter = subPackageSupplier != null ?
                new ObjectParameter("SubPackageSupplier", subPackageSupplier) :
                new ObjectParameter("SubPackageSupplier", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var mainPackageSupplierParameter = mainPackageSupplier != null ?
                new ObjectParameter("MainPackageSupplier", mainPackageSupplier) :
                new ObjectParameter("MainPackageSupplier", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var statusCodesParameter = statusCodes != null ?
                new ObjectParameter("StatusCodes", statusCodes) :
                new ObjectParameter("StatusCodes", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var sampleCodeParameter = sampleCode != null ?
                new ObjectParameter("SampleCode", sampleCode) :
                new ObjectParameter("SampleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetViewPackageWithStatusCodeByParam_Result>("USP_GetViewPackageWithStatusCodeByParam", partNumberParameter, subPackageSupplierParameter, subPackageIdParameter, mainPackageSupplierParameter, mainPackageIdParameter, statusCodesParameter, mHUParameter, sampleCodeParameter);
        }
    
        public virtual ObjectResult<string> USP_InactivateLocation(string storageName, string userId, ObjectParameter returnVal)
        {
            var storageNameParameter = storageName != null ?
                new ObjectParameter("StorageName", storageName) :
                new ObjectParameter("StorageName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_InactivateLocation", storageNameParameter, userIdParameter, returnVal);
        }
    
        public virtual int USP_Insert_AutoScanner(string packageNumber, string supplierId, string partNumber, Nullable<int> packageQuantity, string aSNId, string palletType, Nullable<int> palletFrames, Nullable<int> transportAssignmentId, string createdBy, Nullable<System.DateTime> createdTime, string packageId, ObjectParameter autoScannerId)
        {
            var packageNumberParameter = packageNumber != null ?
                new ObjectParameter("PackageNumber", packageNumber) :
                new ObjectParameter("PackageNumber", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var packageQuantityParameter = packageQuantity.HasValue ?
                new ObjectParameter("PackageQuantity", packageQuantity) :
                new ObjectParameter("PackageQuantity", typeof(int));
    
            var aSNIdParameter = aSNId != null ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(string));
    
            var palletTypeParameter = palletType != null ?
                new ObjectParameter("PalletType", palletType) :
                new ObjectParameter("PalletType", typeof(string));
    
            var palletFramesParameter = palletFrames.HasValue ?
                new ObjectParameter("PalletFrames", palletFrames) :
                new ObjectParameter("PalletFrames", typeof(int));
    
            var transportAssignmentIdParameter = transportAssignmentId.HasValue ?
                new ObjectParameter("TransportAssignmentId", transportAssignmentId) :
                new ObjectParameter("TransportAssignmentId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Insert_AutoScanner", packageNumberParameter, supplierIdParameter, partNumberParameter, packageQuantityParameter, aSNIdParameter, palletTypeParameter, palletFramesParameter, transportAssignmentIdParameter, createdByParameter, createdTimeParameter, packageIdParameter, autoScannerId);
        }
    
        public virtual int USP_InsertAdvanceShipmentNotice(string supplierId, string shipmentNoticeId, Nullable<System.DateTime> shipmentTime, string carrierName, string consignmentNumber, string trailerId, Nullable<System.DateTime> plannedArrivalTime, Nullable<System.DateTime> arrivedTime, Nullable<decimal> grossWeight, string deliveryAddress, Nullable<int> statusId, Nullable<int> flightExpressId, string siteId, string createdBy, Nullable<System.DateTime> createdTime, string modifiedBy, string entryDocument, Nullable<System.DateTime> modifiedTime, Nullable<int> objectVersion, ObjectParameter aSNId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var shipmentNoticeIdParameter = shipmentNoticeId != null ?
                new ObjectParameter("ShipmentNoticeId", shipmentNoticeId) :
                new ObjectParameter("ShipmentNoticeId", typeof(string));
    
            var shipmentTimeParameter = shipmentTime.HasValue ?
                new ObjectParameter("ShipmentTime", shipmentTime) :
                new ObjectParameter("ShipmentTime", typeof(System.DateTime));
    
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            var consignmentNumberParameter = consignmentNumber != null ?
                new ObjectParameter("ConsignmentNumber", consignmentNumber) :
                new ObjectParameter("ConsignmentNumber", typeof(string));
    
            var trailerIdParameter = trailerId != null ?
                new ObjectParameter("TrailerId", trailerId) :
                new ObjectParameter("TrailerId", typeof(string));
    
            var plannedArrivalTimeParameter = plannedArrivalTime.HasValue ?
                new ObjectParameter("PlannedArrivalTime", plannedArrivalTime) :
                new ObjectParameter("PlannedArrivalTime", typeof(System.DateTime));
    
            var arrivedTimeParameter = arrivedTime.HasValue ?
                new ObjectParameter("ArrivedTime", arrivedTime) :
                new ObjectParameter("ArrivedTime", typeof(System.DateTime));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(decimal));
    
            var deliveryAddressParameter = deliveryAddress != null ?
                new ObjectParameter("DeliveryAddress", deliveryAddress) :
                new ObjectParameter("DeliveryAddress", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var flightExpressIdParameter = flightExpressId.HasValue ?
                new ObjectParameter("FlightExpressId", flightExpressId) :
                new ObjectParameter("FlightExpressId", typeof(int));
    
            var siteIdParameter = siteId != null ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var entryDocumentParameter = entryDocument != null ?
                new ObjectParameter("EntryDocument", entryDocument) :
                new ObjectParameter("EntryDocument", typeof(string));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var objectVersionParameter = objectVersion.HasValue ?
                new ObjectParameter("ObjectVersion", objectVersion) :
                new ObjectParameter("ObjectVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertAdvanceShipmentNotice", supplierIdParameter, shipmentNoticeIdParameter, shipmentTimeParameter, carrierNameParameter, consignmentNumberParameter, trailerIdParameter, plannedArrivalTimeParameter, arrivedTimeParameter, grossWeightParameter, deliveryAddressParameter, statusIdParameter, flightExpressIdParameter, siteIdParameter, createdByParameter, createdTimeParameter, modifiedByParameter, entryDocumentParameter, modifiedTimeParameter, objectVersionParameter, aSNId);
        }
    
        public virtual int USP_InsertAsnPartFromAsnIds(string aSNNumbers, string loginUser)
        {
            var aSNNumbersParameter = aSNNumbers != null ?
                new ObjectParameter("ASNNumbers", aSNNumbers) :
                new ObjectParameter("ASNNumbers", typeof(string));
    
            var loginUserParameter = loginUser != null ?
                new ObjectParameter("LoginUser", loginUser) :
                new ObjectParameter("LoginUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertAsnPartFromAsnIds", aSNNumbersParameter, loginUserParameter);
        }
    
        public virtual int USP_InsertHistoryField(Nullable<long> eventId, string eventFieldName, string value, string originalValue)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(long));
    
            var eventFieldNameParameter = eventFieldName != null ?
                new ObjectParameter("EventFieldName", eventFieldName) :
                new ObjectParameter("EventFieldName", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var originalValueParameter = originalValue != null ?
                new ObjectParameter("OriginalValue", originalValue) :
                new ObjectParameter("OriginalValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertHistoryField", eventIdParameter, eventFieldNameParameter, valueParameter, originalValueParameter);
        }
    
        public virtual int USP_InsertKit(string kitId, Nullable<int> kitTypeId, Nullable<int> stationChangeNoteId, Nullable<int> partOrderTypeId, Nullable<int> triggerTypeId, string triggerPoint, Nullable<int> orderPointQuantity, Nullable<int> replenishQuantity, Nullable<int> noOfPicks, string lastDeliveryPoint, string createdBy, Nullable<System.DateTime> createdTime, string modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> objectVersion)
        {
            var kitIdParameter = kitId != null ?
                new ObjectParameter("KitId", kitId) :
                new ObjectParameter("KitId", typeof(string));
    
            var kitTypeIdParameter = kitTypeId.HasValue ?
                new ObjectParameter("KitTypeId", kitTypeId) :
                new ObjectParameter("KitTypeId", typeof(int));
    
            var stationChangeNoteIdParameter = stationChangeNoteId.HasValue ?
                new ObjectParameter("StationChangeNoteId", stationChangeNoteId) :
                new ObjectParameter("StationChangeNoteId", typeof(int));
    
            var partOrderTypeIdParameter = partOrderTypeId.HasValue ?
                new ObjectParameter("PartOrderTypeId", partOrderTypeId) :
                new ObjectParameter("PartOrderTypeId", typeof(int));
    
            var triggerTypeIdParameter = triggerTypeId.HasValue ?
                new ObjectParameter("TriggerTypeId", triggerTypeId) :
                new ObjectParameter("TriggerTypeId", typeof(int));
    
            var triggerPointParameter = triggerPoint != null ?
                new ObjectParameter("TriggerPoint", triggerPoint) :
                new ObjectParameter("TriggerPoint", typeof(string));
    
            var orderPointQuantityParameter = orderPointQuantity.HasValue ?
                new ObjectParameter("OrderPointQuantity", orderPointQuantity) :
                new ObjectParameter("OrderPointQuantity", typeof(int));
    
            var replenishQuantityParameter = replenishQuantity.HasValue ?
                new ObjectParameter("ReplenishQuantity", replenishQuantity) :
                new ObjectParameter("ReplenishQuantity", typeof(int));
    
            var noOfPicksParameter = noOfPicks.HasValue ?
                new ObjectParameter("NoOfPicks", noOfPicks) :
                new ObjectParameter("NoOfPicks", typeof(int));
    
            var lastDeliveryPointParameter = lastDeliveryPoint != null ?
                new ObjectParameter("LastDeliveryPoint", lastDeliveryPoint) :
                new ObjectParameter("LastDeliveryPoint", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var objectVersionParameter = objectVersion.HasValue ?
                new ObjectParameter("ObjectVersion", objectVersion) :
                new ObjectParameter("ObjectVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertKit", kitIdParameter, kitTypeIdParameter, stationChangeNoteIdParameter, partOrderTypeIdParameter, triggerTypeIdParameter, triggerPointParameter, orderPointQuantityParameter, replenishQuantityParameter, noOfPicksParameter, lastDeliveryPointParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, objectVersionParameter);
        }
    
        public virtual int USP_InsertLocGroupLocAndPickingSequence(Nullable<int> locationGroupId, string locationId, Nullable<int> pickingSequence, string locationGroupName, string createdBy, Nullable<System.DateTime> createdTime, string modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> objectVersion)
        {
            var locationGroupIdParameter = locationGroupId.HasValue ?
                new ObjectParameter("LocationGroupId", locationGroupId) :
                new ObjectParameter("LocationGroupId", typeof(int));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var pickingSequenceParameter = pickingSequence.HasValue ?
                new ObjectParameter("PickingSequence", pickingSequence) :
                new ObjectParameter("PickingSequence", typeof(int));
    
            var locationGroupNameParameter = locationGroupName != null ?
                new ObjectParameter("LocationGroupName", locationGroupName) :
                new ObjectParameter("LocationGroupName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var objectVersionParameter = objectVersion.HasValue ?
                new ObjectParameter("ObjectVersion", objectVersion) :
                new ObjectParameter("ObjectVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertLocGroupLocAndPickingSequence", locationGroupIdParameter, locationIdParameter, pickingSequenceParameter, locationGroupNameParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, objectVersionParameter);
        }
    
        public virtual int USP_InsertUnloadList(string carrierName, string trailerId, string status, Nullable<System.DateTime> printedTime, string createdBy, Nullable<System.DateTime> createdTime, string modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> objectVersion, ObjectParameter id)
        {
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            var trailerIdParameter = trailerId != null ?
                new ObjectParameter("TrailerId", trailerId) :
                new ObjectParameter("TrailerId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var printedTimeParameter = printedTime.HasValue ?
                new ObjectParameter("PrintedTime", printedTime) :
                new ObjectParameter("PrintedTime", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var objectVersionParameter = objectVersion.HasValue ?
                new ObjectParameter("ObjectVersion", objectVersion) :
                new ObjectParameter("ObjectVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertUnloadList", carrierNameParameter, trailerIdParameter, statusParameter, printedTimeParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, objectVersionParameter, id);
        }
    
        public virtual int USP_LoadUnreceiveIdentifiedPacks(string partNumber, string supplierId, string dept, string mHU, string docNo, string mainPackageId)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_LoadUnreceiveIdentifiedPacks", partNumberParameter, supplierIdParameter, deptParameter, mHUParameter, docNoParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_ManageMaterialBookigs_Result> USP_ManageMaterialBookigs(string bookingLocation, string partNumber, string receivingDepartment, string languageCode)
        {
            var bookingLocationParameter = bookingLocation != null ?
                new ObjectParameter("BookingLocation", bookingLocation) :
                new ObjectParameter("BookingLocation", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var receivingDepartmentParameter = receivingDepartment != null ?
                new ObjectParameter("ReceivingDepartment", receivingDepartment) :
                new ObjectParameter("ReceivingDepartment", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ManageMaterialBookigs_Result>("USP_ManageMaterialBookigs", bookingLocationParameter, partNumberParameter, receivingDepartmentParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_PartInfoPartAttribute_Result> USP_PartInfoPartAttribute(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_PartInfoPartAttribute_Result>("USP_PartInfoPartAttribute", partNumberParameter);
        }
    
        public virtual ObjectResult<USP_PartInfoPartDescription_Result> USP_PartInfoPartDescription(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_PartInfoPartDescription_Result>("USP_PartInfoPartDescription", partNumberParameter);
        }
    
        public virtual ObjectResult<USP_PartInfoPartDetails_Result> USP_PartInfoPartDetails(string partNumber)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_PartInfoPartDetails_Result>("USP_PartInfoPartDetails", partNumberParameter);
        }
    
        public virtual int USP_SaveMainPackageLocation(string deliveryLocation, string currentLocation, Nullable<System.DateTime> packageTime, Nullable<decimal> packageWeight, Nullable<int> palletTypeId, string packageType, string status, string costCenter, string createdBy, Nullable<System.DateTime> createdTime, string modifiedBy, Nullable<System.DateTime> modifiedTime, Nullable<int> objectVersion, string mainPackageId, string supplierId, Nullable<bool> isLocationEditable)
        {
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var currentLocationParameter = currentLocation != null ?
                new ObjectParameter("CurrentLocation", currentLocation) :
                new ObjectParameter("CurrentLocation", typeof(string));
    
            var packageTimeParameter = packageTime.HasValue ?
                new ObjectParameter("PackageTime", packageTime) :
                new ObjectParameter("PackageTime", typeof(System.DateTime));
    
            var packageWeightParameter = packageWeight.HasValue ?
                new ObjectParameter("PackageWeight", packageWeight) :
                new ObjectParameter("PackageWeight", typeof(decimal));
    
            var palletTypeIdParameter = palletTypeId.HasValue ?
                new ObjectParameter("PalletTypeId", palletTypeId) :
                new ObjectParameter("PalletTypeId", typeof(int));
    
            var packageTypeParameter = packageType != null ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdTimeParameter = createdTime.HasValue ?
                new ObjectParameter("CreatedTime", createdTime) :
                new ObjectParameter("CreatedTime", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedTimeParameter = modifiedTime.HasValue ?
                new ObjectParameter("ModifiedTime", modifiedTime) :
                new ObjectParameter("ModifiedTime", typeof(System.DateTime));
    
            var objectVersionParameter = objectVersion.HasValue ?
                new ObjectParameter("ObjectVersion", objectVersion) :
                new ObjectParameter("ObjectVersion", typeof(int));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var isLocationEditableParameter = isLocationEditable.HasValue ?
                new ObjectParameter("IsLocationEditable", isLocationEditable) :
                new ObjectParameter("IsLocationEditable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SaveMainPackageLocation", deliveryLocationParameter, currentLocationParameter, packageTimeParameter, packageWeightParameter, palletTypeIdParameter, packageTypeParameter, statusParameter, costCenterParameter, createdByParameter, createdTimeParameter, modifiedByParameter, modifiedTimeParameter, objectVersionParameter, mainPackageIdParameter, supplierIdParameter, isLocationEditableParameter);
        }
    
        public virtual ObjectResult<USP_SearchAllowedPackage_Result> USP_SearchAllowedPackage(string costCenterId, Nullable<int> packageStatusCodeId)
        {
            var costCenterIdParameter = costCenterId != null ?
                new ObjectParameter("CostCenterId", costCenterId) :
                new ObjectParameter("CostCenterId", typeof(string));
    
            var packageStatusCodeIdParameter = packageStatusCodeId.HasValue ?
                new ObjectParameter("PackageStatusCodeId", packageStatusCodeId) :
                new ObjectParameter("PackageStatusCodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SearchAllowedPackage_Result>("USP_SearchAllowedPackage", costCenterIdParameter, packageStatusCodeIdParameter);
        }
    
        public virtual int USP_SearchFreeLocationId(Nullable<int> zONE_NO, Nullable<int> lEVELPOS, Nullable<int> pACKPALLETEFRAME, Nullable<int> mAXPALLETEFRAME, string locType, string dept, string nOTINLOCATION)
        {
            var zONE_NOParameter = zONE_NO.HasValue ?
                new ObjectParameter("ZONE_NO", zONE_NO) :
                new ObjectParameter("ZONE_NO", typeof(int));
    
            var lEVELPOSParameter = lEVELPOS.HasValue ?
                new ObjectParameter("LEVELPOS", lEVELPOS) :
                new ObjectParameter("LEVELPOS", typeof(int));
    
            var pACKPALLETEFRAMEParameter = pACKPALLETEFRAME.HasValue ?
                new ObjectParameter("PACKPALLETEFRAME", pACKPALLETEFRAME) :
                new ObjectParameter("PACKPALLETEFRAME", typeof(int));
    
            var mAXPALLETEFRAMEParameter = mAXPALLETEFRAME.HasValue ?
                new ObjectParameter("MAXPALLETEFRAME", mAXPALLETEFRAME) :
                new ObjectParameter("MAXPALLETEFRAME", typeof(int));
    
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var nOTINLOCATIONParameter = nOTINLOCATION != null ?
                new ObjectParameter("NOTINLOCATION", nOTINLOCATION) :
                new ObjectParameter("NOTINLOCATION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SearchFreeLocationId", zONE_NOParameter, lEVELPOSParameter, pACKPALLETEFRAMEParameter, mAXPALLETEFRAMEParameter, locTypeParameter, deptParameter, nOTINLOCATIONParameter);
        }
    
        public virtual ObjectResult<string> USP_SearchFreeLocationIdWithNoZoneNo(Nullable<int> lEVELPOS, Nullable<int> pACKPALLETEFRAME, Nullable<int> mAXPALLETEFRAME, string locType)
        {
            var lEVELPOSParameter = lEVELPOS.HasValue ?
                new ObjectParameter("LEVELPOS", lEVELPOS) :
                new ObjectParameter("LEVELPOS", typeof(int));
    
            var pACKPALLETEFRAMEParameter = pACKPALLETEFRAME.HasValue ?
                new ObjectParameter("PACKPALLETEFRAME", pACKPALLETEFRAME) :
                new ObjectParameter("PACKPALLETEFRAME", typeof(int));
    
            var mAXPALLETEFRAMEParameter = mAXPALLETEFRAME.HasValue ?
                new ObjectParameter("MAXPALLETEFRAME", mAXPALLETEFRAME) :
                new ObjectParameter("MAXPALLETEFRAME", typeof(int));
    
            var locTypeParameter = locType != null ?
                new ObjectParameter("LocType", locType) :
                new ObjectParameter("LocType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_SearchFreeLocationIdWithNoZoneNo", lEVELPOSParameter, pACKPALLETEFRAMEParameter, mAXPALLETEFRAMEParameter, locTypeParameter);
        }
    
        public virtual ObjectResult<string> USP_SearchFreepLocationFormPack(string dept, string mainPackageId, string mainPackageSupplierId, Nullable<int> zoneNo, string lEVELPOSNO, Nullable<int> lOCATIONPACKAGEHANDLING)
        {
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            var zoneNoParameter = zoneNo.HasValue ?
                new ObjectParameter("ZoneNo", zoneNo) :
                new ObjectParameter("ZoneNo", typeof(int));
    
            var lEVELPOSNOParameter = lEVELPOSNO != null ?
                new ObjectParameter("LEVELPOSNO", lEVELPOSNO) :
                new ObjectParameter("LEVELPOSNO", typeof(string));
    
            var lOCATIONPACKAGEHANDLINGParameter = lOCATIONPACKAGEHANDLING.HasValue ?
                new ObjectParameter("LOCATIONPACKAGEHANDLING", lOCATIONPACKAGEHANDLING) :
                new ObjectParameter("LOCATIONPACKAGEHANDLING", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_SearchFreepLocationFormPack", deptParameter, mainPackageIdParameter, mainPackageSupplierIdParameter, zoneNoParameter, lEVELPOSNOParameter, lOCATIONPACKAGEHANDLINGParameter);
        }
    
        public virtual ObjectResult<string> USP_SearchFreeQLocationFormPack(string dept, string partNumber, string mHU, Nullable<int> zoneNo, string lEVELPOSNO, string mainPackageId, string mainPackageSupplierId, string eMBALLAGETYPE, Nullable<int> lOCATIONPACKAGEHANDLING)
        {
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var mHUParameter = mHU != null ?
                new ObjectParameter("MHU", mHU) :
                new ObjectParameter("MHU", typeof(string));
    
            var zoneNoParameter = zoneNo.HasValue ?
                new ObjectParameter("ZoneNo", zoneNo) :
                new ObjectParameter("ZoneNo", typeof(int));
    
            var lEVELPOSNOParameter = lEVELPOSNO != null ?
                new ObjectParameter("LEVELPOSNO", lEVELPOSNO) :
                new ObjectParameter("LEVELPOSNO", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            var eMBALLAGETYPEParameter = eMBALLAGETYPE != null ?
                new ObjectParameter("EMBALLAGETYPE", eMBALLAGETYPE) :
                new ObjectParameter("EMBALLAGETYPE", typeof(string));
    
            var lOCATIONPACKAGEHANDLINGParameter = lOCATIONPACKAGEHANDLING.HasValue ?
                new ObjectParameter("LOCATIONPACKAGEHANDLING", lOCATIONPACKAGEHANDLING) :
                new ObjectParameter("LOCATIONPACKAGEHANDLING", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_SearchFreeQLocationFormPack", deptParameter, partNumberParameter, mHUParameter, zoneNoParameter, lEVELPOSNOParameter, mainPackageIdParameter, mainPackageSupplierIdParameter, eMBALLAGETYPEParameter, lOCATIONPACKAGEHANDLINGParameter);
        }
    
        public virtual ObjectResult<USP_SearchSubPackageBookings_Result> USP_SearchSubPackageBookings(string packageSupplierId, string packageId, string internalOrderNumber)
        {
            var packageSupplierIdParameter = packageSupplierId != null ?
                new ObjectParameter("PackageSupplierId", packageSupplierId) :
                new ObjectParameter("PackageSupplierId", typeof(string));
    
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            var internalOrderNumberParameter = internalOrderNumber != null ?
                new ObjectParameter("InternalOrderNumber", internalOrderNumber) :
                new ObjectParameter("InternalOrderNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SearchSubPackageBookings_Result>("USP_SearchSubPackageBookings", packageSupplierIdParameter, packageIdParameter, internalOrderNumberParameter);
        }
    
        public virtual int USP_SetASNSubPackStatus(Nullable<int> pASNId, string pMainPackageId, string pSubPacakgeId, string pStatusCode)
        {
            var pASNIdParameter = pASNId.HasValue ?
                new ObjectParameter("pASNId", pASNId) :
                new ObjectParameter("pASNId", typeof(int));
    
            var pMainPackageIdParameter = pMainPackageId != null ?
                new ObjectParameter("pMainPackageId", pMainPackageId) :
                new ObjectParameter("pMainPackageId", typeof(string));
    
            var pSubPacakgeIdParameter = pSubPacakgeId != null ?
                new ObjectParameter("pSubPacakgeId", pSubPacakgeId) :
                new ObjectParameter("pSubPacakgeId", typeof(string));
    
            var pStatusCodeParameter = pStatusCode != null ?
                new ObjectParameter("pStatusCode", pStatusCode) :
                new ObjectParameter("pStatusCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SetASNSubPackStatus", pASNIdParameter, pMainPackageIdParameter, pSubPacakgeIdParameter, pStatusCodeParameter);
        }
    
        public virtual int USP_SetProductionOrderStartTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SetProductionOrderStartTime");
        }
    
        public virtual int USP_ShowDetailedLocationInfo(string areaId, string locationId, Nullable<int> zoneNumber, string locationType, string locationStatus, Nullable<int> levelPosNo, string locationGroupId, string languageCode)
        {
            var areaIdParameter = areaId != null ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var zoneNumberParameter = zoneNumber.HasValue ?
                new ObjectParameter("ZoneNumber", zoneNumber) :
                new ObjectParameter("ZoneNumber", typeof(int));
    
            var locationTypeParameter = locationType != null ?
                new ObjectParameter("LocationType", locationType) :
                new ObjectParameter("LocationType", typeof(string));
    
            var locationStatusParameter = locationStatus != null ?
                new ObjectParameter("LocationStatus", locationStatus) :
                new ObjectParameter("LocationStatus", typeof(string));
    
            var levelPosNoParameter = levelPosNo.HasValue ?
                new ObjectParameter("LevelPosNo", levelPosNo) :
                new ObjectParameter("LevelPosNo", typeof(int));
    
            var locationGroupIdParameter = locationGroupId != null ?
                new ObjectParameter("LocationGroupId", locationGroupId) :
                new ObjectParameter("LocationGroupId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ShowDetailedLocationInfo", areaIdParameter, locationIdParameter, zoneNumberParameter, locationTypeParameter, locationStatusParameter, levelPosNoParameter, locationGroupIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_ShowLocationPackage_Result> USP_ShowLocationPackage(string locationId, string languageCode)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ShowLocationPackage_Result>("USP_ShowLocationPackage", locationIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_ShowLocationPackageGroup_Result> USP_ShowLocationPackageGroup(string locationId, string languageCode)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            var languageCodeParameter = languageCode != null ?
                new ObjectParameter("LanguageCode", languageCode) :
                new ObjectParameter("LanguageCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ShowLocationPackageGroup_Result>("USP_ShowLocationPackageGroup", locationIdParameter, languageCodeParameter);
        }
    
        public virtual ObjectResult<USP_ShowPackageDetailsForALocation_Result> USP_ShowPackageDetailsForALocation(string locationId)
        {
            var locationIdParameter = locationId != null ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ShowPackageDetailsForALocation_Result>("USP_ShowPackageDetailsForALocation", locationIdParameter);
        }
    
        public virtual ObjectResult<USP_ShowSubPackDetails_Result> USP_ShowSubPackDetails(string mainPackageSupplierId, string mainPackageId)
        {
            var mainPackageSupplierIdParameter = mainPackageSupplierId != null ?
                new ObjectParameter("MainPackageSupplierId", mainPackageSupplierId) :
                new ObjectParameter("MainPackageSupplierId", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ShowSubPackDetails_Result>("USP_ShowSubPackDetails", mainPackageSupplierIdParameter, mainPackageIdParameter);
        }
    
        public virtual int USP_UpdateAsnOnAdjustPackage(Nullable<int> aSNId, Nullable<int> packageStatusId, string mainPackageId, string subPackageId, string userId)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var packageStatusIdParameter = packageStatusId.HasValue ?
                new ObjectParameter("PackageStatusId", packageStatusId) :
                new ObjectParameter("PackageStatusId", typeof(int));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var subPackageIdParameter = subPackageId != null ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateAsnOnAdjustPackage", aSNIdParameter, packageStatusIdParameter, mainPackageIdParameter, subPackageIdParameter, userIdParameter);
        }
    
        public virtual int USP_UpdateAsnPartMHU(string aSNNumbers, string loginUser)
        {
            var aSNNumbersParameter = aSNNumbers != null ?
                new ObjectParameter("ASNNumbers", aSNNumbers) :
                new ObjectParameter("ASNNumbers", typeof(string));
    
            var loginUserParameter = loginUser != null ?
                new ObjectParameter("LoginUser", loginUser) :
                new ObjectParameter("LoginUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateAsnPartMHU", aSNNumbersParameter, loginUserParameter);
        }
    
        public virtual int USP_UpdateAsnPartMHUByPackage(string packageNumbers, string aSNNumbers, string loginUser)
        {
            var packageNumbersParameter = packageNumbers != null ?
                new ObjectParameter("PackageNumbers", packageNumbers) :
                new ObjectParameter("PackageNumbers", typeof(string));
    
            var aSNNumbersParameter = aSNNumbers != null ?
                new ObjectParameter("ASNNumbers", aSNNumbers) :
                new ObjectParameter("ASNNumbers", typeof(string));
    
            var loginUserParameter = loginUser != null ?
                new ObjectParameter("LoginUser", loginUser) :
                new ObjectParameter("LoginUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateAsnPartMHUByPackage", packageNumbersParameter, aSNNumbersParameter, loginUserParameter);
        }
    
        public virtual int USP_UpdateAsnPartMHUByPartNum(string partNumbers, string aSNNumbers, string loginUser, string mainPackageId)
        {
            var partNumbersParameter = partNumbers != null ?
                new ObjectParameter("PartNumbers", partNumbers) :
                new ObjectParameter("PartNumbers", typeof(string));
    
            var aSNNumbersParameter = aSNNumbers != null ?
                new ObjectParameter("ASNNumbers", aSNNumbers) :
                new ObjectParameter("ASNNumbers", typeof(string));
    
            var loginUserParameter = loginUser != null ?
                new ObjectParameter("LoginUser", loginUser) :
                new ObjectParameter("LoginUser", typeof(string));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateAsnPartMHUByPartNum", partNumbersParameter, aSNNumbersParameter, loginUserParameter, mainPackageIdParameter);
        }
    
        public virtual ObjectResult<USP_UpdateAsnSubPackageStatusAndGet_Result> USP_UpdateAsnSubPackageStatusAndGet(Nullable<int> aSNId, string mainPackageId, string partNumber, string supplierId, string status, string userId)
        {
            var aSNIdParameter = aSNId.HasValue ?
                new ObjectParameter("ASNId", aSNId) :
                new ObjectParameter("ASNId", typeof(int));
    
            var mainPackageIdParameter = mainPackageId != null ?
                new ObjectParameter("MainPackageId", mainPackageId) :
                new ObjectParameter("MainPackageId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_UpdateAsnSubPackageStatusAndGet_Result>("USP_UpdateAsnSubPackageStatusAndGet", aSNIdParameter, mainPackageIdParameter, partNumberParameter, supplierIdParameter, statusParameter, userIdParameter);
        }
    
        public virtual int USP_UpdateAutoScannerTrpAss(Nullable<int> pTransportAssignmentId, string pMainPackageId, string pSupplierId)
        {
            var pTransportAssignmentIdParameter = pTransportAssignmentId.HasValue ?
                new ObjectParameter("pTransportAssignmentId", pTransportAssignmentId) :
                new ObjectParameter("pTransportAssignmentId", typeof(int));
    
            var pMainPackageIdParameter = pMainPackageId != null ?
                new ObjectParameter("pMainPackageId", pMainPackageId) :
                new ObjectParameter("pMainPackageId", typeof(string));
    
            var pSupplierIdParameter = pSupplierId != null ?
                new ObjectParameter("pSupplierId", pSupplierId) :
                new ObjectParameter("pSupplierId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateAutoScannerTrpAss", pTransportAssignmentIdParameter, pMainPackageIdParameter, pSupplierIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_UpdateUnloadListDetails(string supplierId, string partNumber, string shipmentNoticeId, string fieldToUpdate, string value, string userId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var shipmentNoticeIdParameter = shipmentNoticeId != null ?
                new ObjectParameter("ShipmentNoticeId", shipmentNoticeId) :
                new ObjectParameter("ShipmentNoticeId", typeof(string));
    
            var fieldToUpdateParameter = fieldToUpdate != null ?
                new ObjectParameter("FieldToUpdate", fieldToUpdate) :
                new ObjectParameter("FieldToUpdate", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_UpdateUnloadListDetails", supplierIdParameter, partNumberParameter, shipmentNoticeIdParameter, fieldToUpdateParameter, valueParameter, userIdParameter);
        }
    }
}
